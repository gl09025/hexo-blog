<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[跨域]]></title>
      <url>/2018/03/19/%E8%B7%A8%E5%9F%9F/</url>
      <content type="html"><![CDATA[<p>跨域的主要几种方案： JSONP、CSRF、降域、postMessage</p>
<h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><p>由于同源策略，一般来说位于server1.example.com的网页无法与不是 server1.example.com的服务器沟通，而HTML的 <code>&lt;script&gt;</code>元素是一个例外。利用 <code>&lt;script&gt;</code>元素的这个开放策略，网页可以得到从其他来源动态产生的JSON数据，而这种使用模式就是所谓的 JSONP。用JSONP抓到的数据并不是JSON，而是任意的JavaScript，用 JavaScript解释器运行而不是用JSON解析器解析。</p>
<h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p>需要后台服务器的配合。</p>
<p>我们在本地利用server-mock模拟一个服务器。<br>route.js,里面有一些数据，返回的是请求的url里的特定查询参数callback的值加上特定格式的js代码片段。</p>
<pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/getNews'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> news <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token string">"第11日前瞻：中国冲击4金 博尔特再战200米羽球"</span><span class="token punctuation">,</span>
        <span class="token string">"正直播柴飚/洪炜出战 男双力争会师决赛"</span><span class="token punctuation">,</span>
        <span class="token string">"女排将死磕巴西！郎平安排男陪练模仿对方核心"</span><span class="token punctuation">,</span>
        <span class="token string">"没有中国选手和巨星的110米栏 我们还看吗？"</span><span class="token punctuation">,</span>
        <span class="token string">"中英上演奥运金牌大战"</span><span class="token punctuation">,</span>
        <span class="token string">"博彩赔率挺中国夺回第二纽约时报：中国因对手服禁药而丢失的奖牌最多"</span><span class="token punctuation">,</span>
        <span class="token string">"最“出柜”奥运？同性之爱闪耀里约"</span><span class="token punctuation">,</span>
        <span class="token string">"下跪拜谢与洪荒之力一样 都是真情流露"</span>
    <span class="token punctuation">]</span>
    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>news<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>news<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        news<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> cb <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>callback<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>cb <span class="token operator">+</span> <span class="token string">'('</span><span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>在前端我们将从服务器返回的js代码片段进行处理</p>
<pre class=" language-javascript"><code class="language-javascript">
        <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.change'</span><span class="token punctuation">)</span>
       btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://b.example.com:8080/getNews?callback=appendHtml'</span><span class="token punctuation">;</span>
            document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
            document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>


            <span class="token keyword">function</span> <span class="token function">appendHtml</span><span class="token punctuation">(</span>news<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>news<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    html <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;li>'</span> <span class="token operator">+</span> news<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'&lt;/li>'</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">var</span> myNews <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.news'</span><span class="token punctuation">)</span>
                myNews<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> html<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
</code></pre>
<p>在页面中创建一个script标签并插入到页面中就会发送请求，然后再处理返回的请求。<br>这里我们向b.example.com:8080 请求数据，本地域名为localhost</p>
<p><img src="https://raw.githubusercontent.com/gl09025/image_respository/master/2017%E5%B9%B47%E6%9C%8827%E6%97%A5/%E8%B7%A8%E5%9F%9F/jsonp.png" alt=""></p>
<p>可以看到我们从localhost向b.example发送了请求并返回了想要的数据。</p>
<h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><p>客户端在使用XMLHttpRequest来跨域访问时会在请求中带一个origin字段。<br>服务器在检测到请求头重包含origin时也增加一个 HTTP 首部字段<code>Access-Control-Allow-Origin</code> ，声明哪些源站有权限访问哪些资源。</p>
<p><img src="https://raw.githubusercontent.com/gl09025/image_respository/master/2017%E5%B9%B47%E6%9C%8827%E6%97%A5/%E8%B7%A8%E5%9F%9F/simple_req.png" alt=""></p>
<p>服务器端代码如下<br>router.js</p>
<pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/getNews'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> news <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token string">"第11日前瞻：中国冲击4金 博尔特再战200米羽球"</span><span class="token punctuation">,</span>
        <span class="token string">"正直播柴飚/洪炜出战 男双力争会师决赛"</span><span class="token punctuation">,</span>
        <span class="token string">"女排将死磕巴西！郎平安排男陪练模仿对方核心"</span><span class="token punctuation">,</span>
        <span class="token string">"没有中国选手和巨星的110米栏 我们还看吗？"</span><span class="token punctuation">,</span>
        <span class="token string">"中英上演奥运金牌大战"</span><span class="token punctuation">,</span>
        <span class="token string">"博彩赔率挺中国夺回第二纽约时报：中国因对手服禁药而丢失的奖牌最多"</span><span class="token punctuation">,</span>
        <span class="token string">"最“出柜”奥运？同性之爱闪耀里约"</span><span class="token punctuation">,</span>
        <span class="token string">"下跪拜谢与洪荒之力一样 都是真情流露"</span>
    <span class="token punctuation">]</span>
    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>news<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>news<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        news<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> <span class="token string">"http://localhost:8080"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment" spellcheck="true">//res.header("Access-Control-Allow-Origin", "*"); </span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>设置了<code>Access-Control-Allow-Origin</code> 头部字段，并且只允许从localhost:8080 来发送请求。<br>前端只需要使用正常的XMLHttpRequest请求就可以了。</p>
<pre class=" language-javascript"><code class="language-javascript"> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.change'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'http://b.jrg.com:8080/getNews'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">appendHtml</span><span class="token punctuation">(</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span> <span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    window<span class="token punctuation">.</span>xhr <span class="token operator">=</span> xhr
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">function</span> <span class="token function">appendHtml</span><span class="token punctuation">(</span>news<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>news<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      html <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;li>'</span> <span class="token operator">+</span> news<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'&lt;/li>'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.news'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> html<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">$</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre>
<p><img src="https://raw.githubusercontent.com/gl09025/image_respository/master/2017%E5%B9%B47%E6%9C%8827%E6%97%A5/%E8%B7%A8%E5%9F%9F/CSRF.png" alt=""></p>
<h3 id="降域"><a href="#降域" class="headerlink" title="降域"></a>降域</h3><p>相同域名下的不同子域名可以将document.domain设置为同样的域名，达到数据交互的目的。<br>这里我们利用iframe来举例子,在<a href="http://b.example.com:8080/b.html" target="_blank" rel="noopener">http://b.example.com:8080/b.html</a> 中的input输入数值时，<a href="http://a.example.com:8080/a.html" target="_blank" rel="noopener">http://a.example.com:8080/a.html</a> 中的input也输入同样的数值。</p>
<p>在a.example.com中添加一个b.example.com的iframe。利用将域来实现a可以拿到b的数据。<br>在a和b中都设置document.domain = ‘examplea.com’;，这样就可以通信了。</p>
<p>a.html</p>
<pre class=" language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
  <span class="token selector"><span class="token class">.ct</span></span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">910</span>px<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector"><span class="token class">.main</span></span><span class="token punctuation">{</span>
    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">450</span>px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector"><span class="token class">.main</span> input</span><span class="token punctuation">{</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector"><span class="token class">.iframe</span></span><span class="token punctuation">{</span>
    <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">iframe</span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">450</span>px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px dashed <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ct<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>使用降域实现跨域<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://a.example.com:8080/a.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://b.example.com:8080/b.html<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>


<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
document.querySelector('.main input').addEventListener('input', function(){
  console.log(this.value);
  window.frames[0].document.querySelector('input').value = this.value;
})
document.domain = "example.com"
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<p>b.html</p>
<pre><code>&lt;html&gt;
&lt;style&gt;
    html,body{
        margin: 0;
    }
    input{
        margin: 20px;
        width: 200px;
    }
&lt;/style&gt;

    &lt;input id=&quot;input&quot; type=&quot;text&quot;  placeholder=&quot;http://b.example.com:8080/b.html&quot;&gt;
&lt;script&gt;

document.querySelector(&#39;#input&#39;).addEventListener(&#39;input&#39;, function(){
    window.parent.document.querySelector(&#39;input&#39;).value = this.value;
})
document.domain = &#39;examplea.com&#39;;
&lt;/script&gt;
&lt;/html&gt;
</code></pre><p><img src="https://raw.githubusercontent.com/gl09025/image_respository/master/2017%E5%B9%B47%E6%9C%8827%E6%97%A5/%E8%B7%A8%E5%9F%9F/%E9%99%8D%E5%9F%9F.png" alt=""></p>
<h2 id="postMessage"><a href="#postMessage" class="headerlink" title="postMessage"></a>postMessage</h2><p>不能获取不同源的数据，但可以去主动发送，不管对方接不接收。对方也可以获取到别人发来的数据，如果认可就接收数据进行处理。<br>具体是利用frames的poasMessage方法来发送数据。其他域上可以在页面上监听message事件，要接收数据就自行处理。</p>
<p>a.html</p>
<pre><code>&lt;html&gt;
&lt;style&gt;
    .ct{
        width: 910px;
        margin: auto;
    }
    .main{
        float: left;
        width: 450px;
        height: 300px;
        border: 1px solid #ccc;
    }
    .main input{
        margin: 20px;
        width: 200px;
    }
    .iframe{
        float: right;
    }
    iframe{
        width: 450px;
        height: 300px;
        border: 1px dashed #ccc;
    }
&lt;/style&gt;

&lt;div class=&quot;ct&quot;&gt;
    &lt;h1&gt;使用postMessage实现跨域&lt;/h1&gt;
    &lt;div class=&quot;main&quot;&gt;
        &lt;input type=&quot;text&quot; placeholder=&quot;http://a.example.com:8080/a.html&quot;&gt;
    &lt;/div&gt;

    &lt;iframe src=&quot;http://b.example.com:8080/b.html&quot; frameborder=&quot;0&quot; &gt;&lt;/iframe&gt;

&lt;/div&gt;


&lt;script&gt;
$(&#39;.main input&#39;).addEventListener(&#39;input&#39;, function(){
    console.log(this.value);
    window.frames[0].postMessage(this.value,&#39;*&#39;); //向psstMessage发送数据
})
window.addEventListener(&#39;message&#39;,function(e) { //监听从其他iframe发送来的数据
        $(&#39;.main input&#39;).value = e.data
    console.log(e.data);
});
function $(id){
    return document.querySelector(id);
}
&lt;/script&gt;
&lt;/html&gt;
</code></pre><p>b.html</p>
<pre><code>&lt;html&gt;
&lt;style&gt;
    html,body{
        margin: 0;
    }
    input{
        margin: 20px;
        width: 200px;
    }
&lt;/style&gt;

    &lt;input id=&quot;input&quot; type=&quot;text&quot;  placeholder=&quot;http://b.example.com:8080/b.html&quot;&gt;
&lt;script&gt;

$(&#39;#input&#39;).addEventListener(&#39;input&#39;, function(){
    window.parent.postMessage(this.value, &#39;*&#39;);//发送数据
})
window.addEventListener(&#39;message&#39;,function(e) {//获取数据
        $(&#39;#input&#39;).value = e.data
    console.log(e.data);
});
function $(id){
    return document.querySelector(id);
}    
&lt;/script&gt;
&lt;/html&gt;
</code></pre><p><img src="https://raw.githubusercontent.com/gl09025/image_respository/master/2017%E5%B9%B47%E6%9C%8827%E6%97%A5/%E8%B7%A8%E5%9F%9F/postMessage.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS 小知识整理]]></title>
      <url>/2018/02/04/JS%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h2><p><img src="https://raw.githubusercontent.com/gl09025/image_respository/master/2017%E5%B9%B411%E6%9C%8811%E6%97%A5/setTimeout.png" alt=""></p>
<p>为什么第一个跟第二个输出的不一样呢？</p>
<p>因为<code>setTimeout(fn, time)</code> <strong>这里的fn必须是个函数</strong>。</p>
<p><code>function fn(){return function(){}}  setTimeout(fn(), 1000)</code> 这里会立即执行fn把执行的结果作为setTimeout的参数。</p>
<p>第一个由于是立即执行函数，所以就相当于普通的流输出的，不能当做setTimeout的参数。</p>
<h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><p>最简短的数组去重</p>
<p>es5</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> index<span class="token operator">===</span>array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>es6</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> index<span class="token operator">===</span>array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<p>es6</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[zsh与bash切换]]></title>
      <url>/2017/12/25/zsh%E4%B8%8Ebash%E5%88%87%E6%8D%A2/</url>
      <content type="html"><![CDATA[<h1 id="zsh切换bash"><a href="#zsh切换bash" class="headerlink" title="zsh切换bash"></a>zsh切换bash</h1><p>查询bash所在路径<br><code>which bash</code><br>查出路径后即可更改<br><code>chsh -s /bin/bash</code></p>
<p>重启终端</p>
<h1 id="bash切换zsh"><a href="#bash切换zsh" class="headerlink" title="bash切换zsh"></a>bash切换zsh</h1><p>查询路径同上，然后更改<br><code>chsh -s /usr/local/bin/zsh</code></p>
]]></content>
      
        <categories>
            
            <category> 软件 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mac </tag>
            
            <tag> shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iTerm配置]]></title>
      <url>/2017/12/10/iTerm%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h1 id="Mac下iTerm配置"><a href="#Mac下iTerm配置" class="headerlink" title="Mac下iTerm配置"></a>Mac下iTerm配置</h1><h2 id="安装iTerm"><a href="#安装iTerm" class="headerlink" title="安装iTerm"></a>安装iTerm</h2><p><a href="http://www.iterm2.com/" target="_blank" rel="noopener">官方网站</a><br>下载并安装</p>
<h2 id="配置iTerm"><a href="#配置iTerm" class="headerlink" title="配置iTerm"></a>配置iTerm</h2><p>快捷键呼出（guake-like）<br>在Preferences - keys - Create aDedicated Hotkey Window…<br>添加一个新快捷键，默认配置，点击ok<br><img src="https://raw.githubusercontent.com/gl09025/image_respository/master/2017%E5%B9%B412%E6%9C%8810%E6%97%A5/create%20a%20Dedicated%20Hotkey%20Window.png" alt="create a Dedicated Hotkey Windo"></p>
<p>然后到 Preferences - Profiles下会看到新增的配置，可参考下图配置<br><img src="https://raw.githubusercontent.com/gl09025/image_respository/master/2017%E5%B9%B412%E6%9C%8810%E6%97%A5/Hotkey%20Window%20-iTerm.png" alt="Hotkey Window -iTer"><br>我这里设置为从顶部弹出 Full-Width Top of Screen.效果如下(图中是配置完oh-my-zsh的效果)<br><img src="https://raw.githubusercontent.com/gl09025/image_respository/master/2017%E5%B9%B412%E6%9C%8810%E6%97%A5/top%20of%20screen.png" alt="top of screen"></p>
<h3 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h3><ul>
<li><p>安装<br>Mac 系统自带了 Zsh, 一般不是最新版，如果需要最新版可通过 Homebrew 来安装，没有Homebrew的，去<a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew官网</a>安装<br><code>brew install zsh</code></p>
</li>
<li><p>设置默认shell为zsh<br><code>chsh -s $(which zsh)</code></p>
</li>
<li><p>重启命令行<br>使用如下命令来检查是否安装成功<br><code>echo $SHELL</code><br>有zsh字样出来就成功了</p>
</li>
</ul>
<blockquote>
<p><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH" target="_blank" rel="noopener">英文安装教程</a></p>
</blockquote>
<h3 id="赏心悦目的终端"><a href="#赏心悦目的终端" class="headerlink" title="赏心悦目的终端"></a>赏心悦目的终端</h3><p><img src="https://camo.githubusercontent.com/5c385f15f3eaedb72cfcfbbaf75355b700ac0757/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6f686d797a73682f6f682d6d792d7a73682d6c6f676f2e706e67" alt="oh my zsh"><br><strong>注意：</strong>安装oh-my-zsh之前必须安装zsh<br><a href="http://ohmyz.sh/" target="_blank" rel="noopener">oh-my-zsh官网</a></p>
<ul>
<li>oh-my-zsh目录结构<blockquote>
<p>lib 提供了核心功能的脚本库<br>tools 提供安装、升级等功能的快捷工具<br>plugins 自带插件的存在放位置<br>templates 自带模板的存在放位置<br>themes 自带主题文件的存在放位置<br>custom 个性化配置目录，自安装的插件和主题可放这里</p>
</blockquote>
</li>
</ul>
<p>配置文件路径，主要就是在这里进行配置<br><code>~/.zshrc</code></p>
<ul>
<li><p>设置主题<br><code>ZSH_THEME=&quot;robbyrussel&quot;</code>主题可以自己选择，可以到themes目录查看，然后替换这里双引号里面的主题名字即可。</p>
</li>
<li><p>插件<br>默认插件<br><code>plugins=(git)</code><br>要启用插件就要在括号中添加插件名字<br><code>plugins=(git history-substring-search)</code><br>这里推荐几个插件</p>
<blockquote>
<p><a href="zsh-history-substring-search">https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/history-substring-search</a></p>
<p><a href="zsh-syntax-highlighting">https://github.com/zsh-users/zsh-syntax-highlighting</a></p>
<p><a href="zsh-autosuggestions">https://github.com/zsh-users/zsh-autosuggestions</a></p>
</blockquote>
</li>
</ul>
<p>更多插件</p>
<blockquote>
<p><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins</a><br><a href="https://github.com/unixorn/awesome-zsh-plugins" target="_blank" rel="noopener">https://github.com/unixorn/awesome-zsh-plugins</a><br><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview</a></p>
</blockquote>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><blockquote>
<p><a href="https://www.hi-linux.com/posts/54879.html" target="_blank" rel="noopener">https://www.hi-linux.com/posts/54879.html</a><br><a href="http://www.dreamxu.com/mac-terminal/" target="_blank" rel="noopener">http://www.dreamxu.com/mac-terminal/</a><br><a href="http://wdxtub.com/2016/02/18/oh-my-zsh/" target="_blank" rel="noopener">http://wdxtub.com/2016/02/18/oh-my-zsh/</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 软件 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iTerm2 </tag>
            
            <tag> mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[页脚固定-flex]]></title>
      <url>/2017/11/20/%E9%A1%B5%E8%84%9A%E5%9B%BA%E5%AE%9A-flex/</url>
      <content type="html"><![CDATA[<h2 id="The-HTML"><a href="#The-HTML" class="headerlink" title="The HTML"></a>The HTML</h2><pre><code>&lt;body class=&quot;Site&quot;&gt;
  &lt;header&gt;…&lt;/header&gt;
  &lt;main class=&quot;Site-content&quot;&gt;…&lt;/main&gt;
  &lt;footer&gt;…&lt;/footer&gt;
&lt;/body&gt;
</code></pre><h2 id="The-CSS"><a href="#The-CSS" class="headerlink" title="The CSS"></a>The CSS</h2><pre><code>.Site {
  display: flex;
  min-height: 100vh;
  flex-direction: column;
}

.Site-content {
  flex: 1;
}
</code></pre><blockquote>
<p><a href="https://philipwalton.github.io/solved-by-flexbox/demos/sticky-footer/" target="_blank" rel="noopener">参考</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[setTimeout]]></title>
      <url>/2017/11/11/nouse/setTimeout/</url>
      <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/gl09025/image_respository/master/2017%E5%B9%B411%E6%9C%8811%E6%97%A5/setTimeout.png" alt=""></p>
<p>为什么第一个跟第二个输出的不一样呢？</p>
<p>因为<code>setTimeout(fn, time)</code> <strong>这里的fn必须是个函数</strong>。</p>
<p><code>function fn(){return function(){}}  setTimeout(fn(), 1000)</code> 这里会立即执行fn把执行的结果作为setTimeout的参数。</p>
<p>第一个由于是立即执行函数，所以就相当于普通的流输出的，不能当做setTimeout的参数。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[概率计算公式]]></title>
      <url>/2017/10/24/nouse/%E6%A6%82%E7%8E%87%E8%AE%A1%E7%AE%97%E5%85%AC%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>简单地说C是组合，也可以理解为没有顺序要求的情况；A是排列，需要有不同的顺序。<br>比如你写的C（4，1）就是指在4个里面选1个。没有顺序（1个本来就没有顺序，但2个以上也同样不用考虑顺序问题。）<br>你写的A（5，3）就是在5个里面选3个，但这3个不同的顺序算作不同的情况。<br>现举例说明A（5，3）和C（5，3）的区别。<br>如：12345这5个数，选其中的三个数，共有C（5，3）=10种选法。列举为（123）、（124）、（125）、（134）、（135）、（145）、（234）、（235）、（245）、（345）共10种。<br>同样这5个数，如果组成没有复数字的三位数，就是A（5，3）=60种。123、132、213、231、312、321……也就是原来的一种组合现在变成了6种情况了。</p>
<p>公式更简单。C（4，1）=4/1=4<br>C（5，3）=（5<em>4</em>3）/（3<em>2</em>1）<br>C（7，2）=（7<em>6）/（2</em>1）<br>……<br>也就是分子是下标依次递减相乘，乘的个数正好是上标的个数。<br>分母就是上标的阶乘。</p>
<p>A（5，3）=5<em>4</em>3<br>A（8，6）=8<em>7</em>6<em>5</em>4<em>3<br>A（4，2）=4</em>3<br>也就是只有组合时分子的情况，没有分母。</p>
]]></content>
      
        <categories>
            
            <category> 数学 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数学知识整理]]></title>
      <url>/2017/09/26/%E9%98%B6%E6%A2%AF/</url>
      <content type="html"><![CDATA[<blockquote>
<p>n 级楼梯 每次可以下 1级或者2级  问 n=20 那么一共有多少种下法?</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">down</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">down</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">down</span><span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p><img src="https://raw.githubusercontent.com/gl09025/image_respository/master/2017%E5%B9%B49%E6%9C%8826%E6%97%A5/%E9%98%B6%E6%A2%AF/%E9%98%B6%E6%A2%AFchrome%E6%88%AA%E5%9B%BE.png" alt=""></p>
<h2 id="概率"><a href="#概率" class="headerlink" title="概率"></a>概率</h2><p>简单地说C是组合，也可以理解为没有顺序要求的情况；A是排列，需要有不同的顺序。<br>比如你写的C（4，1）就是指在4个里面选1个。没有顺序（1个本来就没有顺序，但2个以上也同样不用考虑顺序问题。）<br>你写的A（5，3）就是在5个里面选3个，但这3个不同的顺序算作不同的情况。<br>现举例说明A（5，3）和C（5，3）的区别。<br>如：12345这5个数，选其中的三个数，共有C（5，3）=10种选法。列举为（123）、（124）、（125）、（134）、（135）、（145）、（234）、（235）、（245）、（345）共10种。<br>同样这5个数，如果组成没有复数字的三位数，就是A（5，3）=60种。123、132、213、231、312、321……也就是原来的一种组合现在变成了6种情况了。</p>
<p>公式更简单。C（4，1）=4/1=4<br>C（5，3）=（5<em>4</em>3）/（3<em>2</em>1）<br>C（7，2）=（7<em>6）/（2</em>1）<br>……<br>也就是分子是下标依次递减相乘，乘的个数正好是上标的个数。<br>分母就是上标的阶乘。</p>
<p>A（5，3）=5<em>4</em>3<br>A（8，6）=8<em>7</em>6<em>5</em>4<em>3<br>A（4，2）=4</em>3<br>也就是只有组合时分子的情况，没有分母。</p>
]]></content>
      
        <categories>
            
            <category> 数学 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[交换数组指定位置元素]]></title>
      <url>/2017/09/15/%E4%BA%A4%E6%8D%A2%E6%95%B0%E7%BB%84%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE%E5%85%83%E7%B4%A0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>请扩展数组对象Array的原型链，以最简洁的代码实现数组中指定两个位置的值进行调换。<br>例如：<code>var arr = [2,4,5,8,1,3];arr=arr.transition(1,3);arr=[2,8,5,4,1,3]</code><br>Array.prototype.transition=function(){}</p>
</blockquote>
<h2 id="自己写的"><a href="#自己写的" class="headerlink" title="自己写的"></a>自己写的</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">transition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> yElementArray <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
    yElement <span class="token operator">=</span> yElementArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">var</span> xElementArray <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>yElement<span class="token punctuation">)</span>
    xElement <span class="token operator">=</span> xElementArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>xElement<span class="token punctuation">)</span>
    <span class="token keyword">return</span> arr
<span class="token punctuation">}</span>
</code></pre>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">transition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> index1<span class="token punctuation">,</span> index2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   arr<span class="token punctuation">[</span>index1<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>index1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><a href="http://www.cnblogs.com/dearxinli/p/6802151.html" target="_blank" rel="noopener">参考1</a><br><a href="https://my.oschina.net/u/1417838/blog/809438" target="_blank" rel="noopener">参考2</a></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js闭包题目]]></title>
      <url>/2017/09/13/js%E9%97%AD%E5%8C%85%E9%A2%98%E7%9B%AE/</url>
      <content type="html"><![CDATA[<blockquote>
<p>实现函数 makeClosures，调用之后满足如下条件：<br>1、返回一个函数数组 result，长度与 arr 相同 <br><br>2、运行 result 中第 i 个函数，即 <code>result[i]()</code> ，结果与 <code>fn(arr[i])</code> 相同</p>
</blockquote>
<h2 id="题意理解"><a href="#题意理解" class="headerlink" title="题意理解"></a>题意理解</h2><p>题目要求的是将数组的每一个元素都放到一个函数里，并且将数组元素当做函数的参数，这些函数放到一个数组里面，长度与现在的数组相同。<br>函数取名为makeClosures，接受两个参数，一个数组，一个函数。</p>
<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><h3 id="第一次想法"><a href="#第一次想法" class="headerlink" title="第一次想法"></a>第一次想法</h3><p>使用循环将每个函数push进新的数组,参数为传进来的数组的每一项。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">makeClosures</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> result <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//需要返回函数，不是执行结果</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre>
<p>上面的函数有一个问题，我们需要的是返回一个函数，但是<code>fn()</code> 就直接执行了，所以外面要包一层函数。</p>
<h3 id="第二次想法"><a href="#第二次想法" class="headerlink" title="第二次想法"></a>第二次想法</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">makeClosures</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> result <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//得到最后一个i</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre>
<p>这样闭包的话只能得到变量的最后一个值，就是最后得到的都是 <code>arr[arr.length]</code> 需要使用匿名函数通过参数将arr的每一项的值传递进去</p>
<h3 id="第三次，最终结果"><a href="#第三次，最终结果" class="headerlink" title="第三次，最终结果"></a>第三次，最终结果</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">makeClosures</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> result <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//匿名函数将数组每一项传给里面的函数</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre>
<h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><pre class=" language-javascript"><code class="language-javascript">
<span class="token keyword">function</span> <span class="token function">makeClosures</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> result <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//匿名函数将数组每一项传给里面的函数</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result
<span class="token punctuation">}</span>

<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> square <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> funcs <span class="token operator">=</span> <span class="token function">makeClosures</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> square<span class="token punctuation">)</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>funcs<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>funcs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>funcs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>funcs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 9</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>funcs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">square</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="另外一些写法"><a href="#另外一些写法" class="headerlink" title="另外一些写法"></a>另外一些写法</h2><h3 id="使用forEach"><a href="#使用forEach" class="headerlink" title="使用forEach"></a>使用forEach</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">makeClosures</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> result <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span> 
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre>
<p>forEach()方法的参数就是每次循环的当前元素和i无关。</p>
<h3 id="使用bind"><a href="#使用bind" class="headerlink" title="使用bind"></a>使用bind</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">makeClosures</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> result <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre>
<h3 id="ES6的let"><a href="#ES6的let" class="headerlink" title="ES6的let"></a>ES6的let</h3><p>在上面第三步的时候换做使用let也可以保证传入i</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">makeClosures</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> result <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//使用let</span>
        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre>
<p>参考链接</p>
<blockquote>
<p><a href="https://www.nowcoder.com/questionTerminal/578026cd24e3446bbf27fe565473dc26" target="_blank" rel="noopener">参考1-牛客网</a> <br><br><a href="http://www.jianshu.com/p/8dcb306399f0" target="_blank" rel="noopener">参考2-简书</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vim粘贴缩进]]></title>
      <url>/2017/09/12/vim%E7%B2%98%E8%B4%B4%E7%BC%A9%E8%BF%9B/</url>
      <content type="html"><![CDATA[<p>解决办法：</p>
<ol>
<li>在拷贝前输入:set paste (这样的话，vim就不会启动自动缩进，而只是纯拷贝粘贴）</li>
<li>拷贝完成之后，输入:set nopaste (关闭paste)</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> VIM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[字符串改变大小写]]></title>
      <url>/2017/09/05/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%94%B9%E5%8F%98%E5%A4%A7%E5%B0%8F%E5%86%99/</url>
      <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><blockquote>
<p>假定有一个由两个单词组成的姓名字符串，其中混合使用了大小写， 你是否可对字符串进行处理，确保名字的首字母大写，且姓氏全部大写么？ 假定名字和姓氏之间有一个空格。例如，将类似于 “cAmEROn PittMAN” 的字符串转换为 “Cameron PITTMAN”。你的答案应该为一个字符串，保存到名为 finalName 的变量中。</p>
</blockquote>
<h3 id="个人写的答案"><a href="#个人写的答案" class="headerlink" title="个人写的答案"></a>个人写的答案</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"AlbERt EINstEiN"</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">nameChanger</span><span class="token punctuation">(</span>oldName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> finalName <span class="token operator">=</span> oldName<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//字符串变成数组</span>
    <span class="token keyword">var</span> newArray <span class="token operator">=</span> finalName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">//第一部分和第二部分分别操作。第一部分将第一个字母变成大写，存放起来，剩下的部分利用循环都变成小写。</span>
    <span class="token keyword">var</span> leftArray <span class="token operator">=</span> newArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">var</span> rightArray <span class="token operator">=</span> newArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">var</span> firstLeftArray <span class="token operator">=</span> leftArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> leftLeftArray <span class="token operator">=</span> <span class="token string">""</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> leftArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        leftLeftArray <span class="token operator">+</span><span class="token operator">=</span> leftArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> finalLeftString <span class="token operator">=</span> firstLeftArray <span class="token operator">+</span> leftLeftArray
    <span class="token comment" spellcheck="true">//第二部分使用循环都变成大写，存入变量</span>
    <span class="token keyword">var</span> finalRightString <span class="token operator">=</span> <span class="token string">""</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span> rightArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       finalRightString <span class="token operator">+</span><span class="token operator">=</span> rightArray<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//最后拼接起来</span>
    finalName <span class="token operator">=</span> finalLeftString <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span>finalRightString
    <span class="token keyword">return</span> finalName<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// Did your code work? The line below will tell you!</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">nameChanger</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>个人想的思路比较繁琐，多了没有必要的循环，没有想到利用slice和toUpperCase合用来返回新的字符串。<br>可以直接使用数组方括号的方法改变后再赋值给自己，这样就不用创建新变量了，比如可以使用newArray[1] = newArray[1].toUpperCase()来改变newArray[1]。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">nameChanger</span><span class="token punctuation">(</span>oldName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> finalName <span class="token operator">=</span> oldName
    <span class="token keyword">var</span> names <span class="token operator">=</span> finalName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>
    names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    finalName <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> finalName
<span class="token punctuation">}</span>
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"cAmEROn PittMAN"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">nameChanger</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><h3 id="var-names-finalName-split-“-“"><a href="#var-names-finalName-split-“-“" class="headerlink" title="var names = finalName.split(“ “)"></a>var names = finalName.split(“ “)</h3><p>这里，我们正在创建一个名称数组， 用空格将原始名称分开来。此时，对于我们的原始示例，names === [“AlbERt”, “EINstEiN”]</p>
<h3 id="names-1-names-1-toUpperCase"><a href="#names-1-names-1-toUpperCase" class="headerlink" title="names[1] = names[1].toUpperCase()"></a>names[1] = names[1].toUpperCase()</h3><p>将 names 数组中的第二个元素重新分配到全大写的 “EINSTEIN”。</p>
<h3 id="names-0-names-0-slice-0-1-toUpperCase-names-0-slice-1-toLowerCase"><a href="#names-0-names-0-slice-0-1-toUpperCase-names-0-slice-1-toLowerCase" class="headerlink" title="names[0] = names[0].slice(0,1).toUpperCase() + names[0].slice(1).toLowerCase()"></a>names[0] = names[0].slice(0,1).toUpperCase() + names[0].slice(1).toLowerCase()</h3><p>names[0].slice(0,1).toUpperCase() 首先作用于 names 数组中的第一个元素，即示例中的 “AlbERt”。<br>names[0].slice(1).toLowerCase() 转换第一个字符串的剩余部分为小写。<br>如果首字母大写且剩余字母小写， 则使用 + 将二者连接到一起</p>
<h3 id="finalName-names-join-“-“"><a href="#finalName-names-join-“-“" class="headerlink" title="finalName = names.join(“ “)"></a>finalName = names.join(“ “)</h3><p>array.join([chars]) 让我们将数组元素全部放到一个 <code>字符串</code> 中。每个元素将由可选的 chars 分开。在本例中，我们想在名字和姓氏之间加个空格， 所以将 chars 变为 “ “</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数组最后一个数字加1操作]]></title>
      <url>/2017/09/05/%E6%95%B0%E7%BB%84%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E6%95%B0%E5%AD%97%E5%8A%A01%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>提供一个数字数组。是否可将该数组中最后一个数字的值加 1</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> sampleArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> incrementLastArrayElement <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>_array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> newArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// Your code should make newArray equal to an array that has the same</span>
    <span class="token comment" spellcheck="true">// values as _array, but the last number has increased by one.</span>

    <span class="token comment" spellcheck="true">// For example:</span>
    <span class="token comment" spellcheck="true">// _array = [1, 2, 3];</span>
    <span class="token comment" spellcheck="true">// turns into:</span>
    <span class="token comment" spellcheck="true">// newArray = [1, 2, 4];</span>

    <span class="token comment" spellcheck="true">// Your code goes in here!</span>

    <span class="token comment" spellcheck="true">// Don't delete this line!</span>
    <span class="token keyword">return</span> newArray<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// Did your code work? The line below will tell you!</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">incrementLastArrayElement</span><span class="token punctuation">(</span>sampleArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>我们可以使用数组的pop和push方法来实现此需求</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> sampleArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> incrementLastArrayElement <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>_array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> newArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//复制原数组，创建副本</span>
    newArray <span class="token operator">=</span> _array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//pop移除数组最后一个元素，改变了原数组，所有我们上面才建立了_array的副本</span>
    <span class="token keyword">var</span> lastNumber <span class="token operator">=</span> newArray<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//执行加1操作</span>
    newArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>lastNumber <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> newArray<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">incrementLastArrayElement</span><span class="token punctuation">(</span>sampleArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数组去重]]></title>
      <url>/2017/08/16/nouse/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</url>
      <content type="html"><![CDATA[<p>最简短的数组去重</p>
<p>es5</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> index<span class="token operator">===</span>array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>es6</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> index<span class="token operator">===</span>array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<p>es6</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[flex一行宽度调整]]></title>
      <url>/2017/08/15/flex%E4%B8%80%E8%A1%8C%E5%AE%BD%E5%BA%A6%E8%B0%83%E6%95%B4/</url>
      <content type="html"><![CDATA[<p>使用flex布局。<br>在一行中有四个元素等宽排列。<br>我们这样写</p>
<pre class=" language-markup"><code class="language-markup"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>flex等宽排列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
    <span class="token selector"><span class="token class">.flex</span> </span><span class="token punctuation">{</span>
      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
      <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token selector"><span class="token class">.flex</span> div</span><span class="token punctuation">{</span>
      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">25%</span><span class="token punctuation">;</span>
      <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#ddd</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<p><a class="jsbin-embed" href="http://jsbin.com/gopufax/embed?output" target="_blank" rel="noopener">flex等宽排列 on jsbin.com</a><script src="http://static.jsbin.com/js/embed.min.js?4.0.4"></script></p>
<p>使用flex后就简单的设置每个元素的宽度为25%就可以了。</p>
<h2 id="给其中一个改变比例"><a href="#给其中一个改变比例" class="headerlink" title="给其中一个改变比例"></a>给其中一个改变比例</h2><p>现在如果需求是需要将第二个改为35%我们该怎么写CSS呢？<br>还是利用flex的一些属性，flex-grow,flex-shrink</p>
<pre class=" language-markup"><code class="language-markup"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>flex等宽排列，变动其中一个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
    <span class="token selector"><span class="token class">.flex</span> </span><span class="token punctuation">{</span>
      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
     <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token selector"><span class="token class">.flex</span> div</span><span class="token punctuation">{</span>
      <span class="token property">flex-basis</span><span class="token punctuation">:</span> <span class="token number">25%</span><span class="token punctuation">;</span>
      <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#ddd</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token selector"><span class="token class">.flex</span> div<span class="token pseudo-class">:nth-child(2)</span> </span><span class="token punctuation">{</span>
      <span class="token property">flex-basis</span><span class="token punctuation">:</span> <span class="token number">55%</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<p><a class="jsbin-embed" href="http://jsbin.com/jovubes/embed?output" target="_blank" rel="noopener">flex等宽排列，变动其中一个 on jsbin.com</a><script src="http://static.jsbin.com/js/embed.min.js?4.0.4"></script></p>
<p>设置每个元素的flex-basis为25%, flex-basis 指定了 flex 元素在主轴方向上的初始大小。<br>然后设置第二个的flex-basis为需求比例。就有效果了</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[How to Style a Selected Radio Buttons Label]]></title>
      <url>/2017/07/26/How-to-Style-a-Selected-Radio-Buttons-Label/</url>
      <content type="html"><![CDATA[<p>选中radio按钮改变样式</p>
<p><a class="jsbin-embed" href="http://jsbin.com/katemofega/2/embed?output" target="_blank" rel="noopener">JS Bin on jsbin.com</a><script src="http://static.jsbin.com/js/embed.min.js?4.0.4"></script></p>
<p><a href="http://jsbin.com/katemofega/2/edit?html,css,output" target="_blank" rel="noopener">效果演示</a></p>
<pre class=" language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio-toolbar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio1<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radios<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>all<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>All<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio2<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radios<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Open<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio3<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radios<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Archived<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<p>主要是用到一个CSS选择器<code>+</code><br>B + E ：元素B的任一下一个兄弟元素E</p>
<pre class=" language-css"><code class="language-css">    <span class="token selector"><span class="token class">.radio-toolbar</span> input<span class="token attribute">[type="radio"]</span> </span><span class="token punctuation">{</span>
      <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token selector"><span class="token class">.radio-toolbar</span> label </span><span class="token punctuation">{</span>
      <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#ddd</span><span class="token punctuation">;</span>
      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">4</span>px <span class="token number">11</span>px<span class="token punctuation">;</span>
      <span class="token property">font-family</span><span class="token punctuation">:</span> Arial<span class="token punctuation">;</span>
      <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>
      <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token selector"><span class="token class">.radio-toolbar</span> input<span class="token attribute">[type="radio"]</span><span class="token pseudo-class">:checked</span>+label </span><span class="token punctuation">{</span>
      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#bbb</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用原生JS写AJAX例子]]></title>
      <url>/2017/07/21/%E7%94%A8%E5%8E%9F%E7%94%9FJS%E5%86%99AJAX%E4%BE%8B%E5%AD%90/</url>
      <content type="html"><![CDATA[<h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/AJAX/Getting_Started" target="_blank" rel="noopener">MDN_AJAX</a></p>
<p>手写AJAX的主要四个步骤：<br>1.创建XMLHttpReauest<br>2.处理响应（指定响应函数）<br>3.打开链接（指定请求）<br>4.发送请求</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"ajaxButton"</span> type<span class="token operator">=</span><span class="token string">"button"</span><span class="token operator">></span>Make a request<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> httpRequest<span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"ajaxButton"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> makeRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//按钮添加点击事件</span>

  <span class="token keyword">function</span> <span class="token function">makeRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    httpRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建XMLHttpRequest对象</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>httpRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Giving up :( Cannot create an XMLHTTP instance'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    httpRequest<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> alertContents<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定相应函数</span>
    httpRequest<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'test.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打开链接</span>
    httpRequest<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//发送请求</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">alertContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>httpRequest<span class="token punctuation">.</span>readyState <span class="token operator">===</span> XMLHttpRequest<span class="token punctuation">.</span>DONE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>httpRequest<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span>httpRequest<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'There was a problem with the request.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[缓存]]></title>
      <url>/2017/06/20/%E7%BC%93%E5%AD%98/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文浅谈了下http缓存<br>文中有任何错误，欢迎批评指正</p>
</blockquote>
<h2 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h2><p>  在通过HTTTP协议获取网页内容的时候，下载文件的速度开销是很大的，尤其是大型的网页，而且每次的响应都需要重复的往返通信。这就导致了浏览器处理内容时间加长，也增加了流量费用。<br>  <em>本文主要摘抄一部分理论，具体操作可以查看参考中的链接</em></p>
<h2 id="什么是缓存"><a href="#什么是缓存" class="headerlink" title="什么是缓存"></a>什么是缓存</h2><p>  缓存是指存储指定资源的一份拷贝，并在下次请求该资源时提供该拷贝的技术。</p>
<h2 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h2><p>  缓存是跟HTTP协议有关的，所以通过设置HTTP的报文首部字段可以指定是否需要缓存和一些其他的缓存功能。</p>
<h3 id="HTTP协议中与缓存相关的首部字段"><a href="#HTTP协议中与缓存相关的首部字段" class="headerlink" title="HTTP协议中与缓存相关的首部字段"></a>HTTP协议中与缓存相关的首部字段</h3><p>1.通用首部字段</p>
<table>
<thead>
<tr>
<th style="text-align:left">字段名称</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Cache-Control</td>
<td style="text-align:left">控制缓存的行为</td>
</tr>
<tr>
<td style="text-align:left">Pragma</td>
<td style="text-align:left">http1.0的旧社会遗物，值为“no-cache”时禁用缓存</td>
</tr>
</tbody>
</table>
<p>2.请求首部字段</p>
<table>
<thead>
<tr>
<th style="text-align:left">字段名称</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">If-Match</td>
<td style="text-align:left">比较ETag是否一致</td>
</tr>
<tr>
<td style="text-align:left">If-None-Match</td>
<td style="text-align:left">比较ETag是否不一致</td>
</tr>
<tr>
<td style="text-align:left">If-Modefied-Since</td>
<td style="text-align:left">比较资源最后更新的时间是否一致</td>
</tr>
<tr>
<td style="text-align:left">If-Unmodefied-Since</td>
<td style="text-align:left">比较资源最后更新的时间是否不一致</td>
</tr>
</tbody>
</table>
<p>3.响应首部字段</p>
<table>
<thead>
<tr>
<th style="text-align:left">字段名称</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ETag</td>
<td style="text-align:left">资源的匹配信息</td>
</tr>
</tbody>
</table>
<p>4.实体首部字段</p>
<table>
<thead>
<tr>
<th style="text-align:left">字段名称</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Expires</td>
<td style="text-align:left">http1.0的遗留物，实体主题过期的时间</td>
</tr>
<tr>
<td style="text-align:left">Last-Modefied</td>
<td style="text-align:left">资源的最后一次修改的时间</td>
</tr>
</tbody>
</table>
<h3 id="使用Cache-Control"><a href="#使用Cache-Control" class="headerlink" title="使用Cache-Control"></a>使用Cache-Control</h3><p>  在http1.0时代，使用<code>Pragma</code>和<code>Expires</code><br>  到了http1.1的时候，现在网站基本都是用的http1.1，增加了<code>Cache-Control</code>来定义缓存过期时间，若报文中同时出现了 Pragma、Expires 和 Cache-Control，会以 Cache-Control 为准。所以，使用cache-control就够了。<br>  Cache-Control 的格式为：</p>
<pre><code>  &quot;Cache-Control&quot; &quot;:&quot; cache-directive
</code></pre><p>  作为请求首部时，cache-directive的可选值有：</p>
<table>
<thead>
<tr>
<th style="text-align:left">字段名称</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">no-cache</td>
<td style="text-align:left">告知（代理）服务器不直接使用缓存，要求向原服务器发起请求</td>
</tr>
<tr>
<td style="text-align:left">no-store</td>
<td style="text-align:left">所有内容都不会被保存到缓存或Internet临时文件中</td>
</tr>
<tr>
<td style="text-align:left">max-age=delta-seconds</td>
<td style="text-align:left">告知服务器客户端希望接收一个存在时间（Age）不大于delta-second秒的资源</td>
</tr>
<tr>
<td style="text-align:left">max-stale[=delta-seconds]</td>
<td style="text-align:left">告知（代理）服务器，客户端愿意接收一个超过缓存时间的资源，若有定义delta-seconds则为delta-seconds秒，若没有则为任意超出的时间</td>
</tr>
<tr>
<td style="text-align:left">min-fresh=delta-seconds</td>
<td style="text-align:left">告知（代理）服务器，客户端希望接收一个在小于delta-seconds秒内被更新过的资源</td>
</tr>
<tr>
<td style="text-align:left">no-transform</td>
<td style="text-align:left">告知（代理）服务器，客户端希望获取实体数据没有被转换（比如压缩）过的资源</td>
</tr>
<tr>
<td style="text-align:left">only-if-cached</td>
<td style="text-align:left">告知（代理）服务器，客户端希望获取缓存的内容（若有），而不用向原服务器发送请求</td>
</tr>
<tr>
<td style="text-align:left">cache-extension</td>
<td style="text-align:left">自定义扩展值，若服务器不识别该值将被忽略掉</td>
</tr>
</tbody>
</table>
<p>作为响应首部时，cache-directive的可选值有：</p>
<table>
<thead>
<tr>
<th style="text-align:left">字段名称</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">public</td>
<td style="text-align:left">表明任何情况下都得缓存该资源（即使是需要HTTP认证的资源）</td>
</tr>
<tr>
<td style="text-align:left">Private[=”field-name”]</td>
<td style="text-align:left">表明返回报文中全部或部分（若指定了field-name则为field-name的字段数据）仅开放给某些用户（服务器指定的share-user，如代理服务器）做缓存使用，其他用户则不能换粗这些数据</td>
</tr>
<tr>
<td style="text-align:left">no-cache</td>
<td style="text-align:left">不直接使用缓存，要求向服务区发起（新鲜度校验）请求</td>
</tr>
<tr>
<td style="text-align:left">no-store</td>
<td style="text-align:left">所有内容都不会被保存到缓存或Internet临时文件中</td>
</tr>
<tr>
<td style="text-align:left">no-transform</td>
<td style="text-align:left">告知客户端缓存文件是不得对实体数据做任何改变</td>
</tr>
<tr>
<td style="text-align:left">only-if-cached</td>
<td style="text-align:left">告知（代理）服务器客户端希望获取缓存的内容（若有），而不用向原服务器发送请求</td>
</tr>
<tr>
<td style="text-align:left">must-revalidate</td>
<td style="text-align:left">当前资源一定是向原服务器发去验证请求的，若请求失败会返回504（而非代理服务器上的缓存）</td>
</tr>
<tr>
<td style="text-align:left">proxy-revalidate</td>
<td style="text-align:left">与must-revalidate类似，但仅能应用于共享缓存（如代理）</td>
</tr>
<tr>
<td style="text-align:left">max-age=delta-seconds</td>
<td style="text-align:left">告知客户端该资源在delta-sec秒内是新鲜的，无需向服务器发请求</td>
</tr>
<tr>
<td style="text-align:left">s-maxage=delta-seconds</td>
<td style="text-align:left">同max-age，但仅应用于共享缓存（如代理）</td>
</tr>
<tr>
<td style="text-align:left">cache-extension</td>
<td style="text-align:left">自定义扩展值，若服务器不识别该值将被忽略掉</td>
</tr>
</tbody>
</table>
<p><code>Cache-Control</code>可以自由组合可选值，比如</p>
<pre><code>Cache-Control: max-age=3600, must-revalidate
</code></pre><p>它意味着该资源是从原服务器上取得的，且其缓存（新鲜度）的有效时间为一小时，在后续一小时内，用户重新访问该资源则无须发送请求。 当然这种组合的方式也会有些限制，比如 no-cache 就不能和 max-age、min-fresh、max-stale 一起搭配使用。</p>
<h4 id="缓存校验字段"><a href="#缓存校验字段" class="headerlink" title="缓存校验字段"></a>缓存校验字段</h4><p>  <code>Last-Modified</code>和<code>ETag</code><br>  现在有一个问题就是，<strong>客户端向服务器发送了请求，那服务器是不是一定要发送所有请求的内容呢？</strong><br>  因为请求的内容可能还是与服务器上是一致的，所以Http1.1新增了几个首部字段来做这件事情。<br>1.Last-Modified<br>  服务器将资源传递给客户端时，会将资源最后更改的时间以“Last-Modified: GMT”的形式加在实体首部上一起返回给客户端。</p>
<pre><code>  Last-Modified: Fri, 22 Jul 2016 01:47:00 GMT
</code></pre><p>  有两个请求报文字段来标记修改时间<br>  ⑴ If-Modified-Since: Last-Modified-value</p>
<pre><code>  If-Modified-Since: Thu, 31 Mar 2016 07:07:52 GMT
</code></pre><p>  如果一致就返回304和响应报头<br>  ⑵ If-Unmodified-Since: Last-Modified-value<br> 如果Last-Modified匹配不上（资源在服务端的最后更新时间改变了），则返回412(Precondition Failed) 状态码给客户端。</p>
<p>2.ETag<br>  上文中的Last-Modified存在一个问题，在服务器上一个资源被修改了，但实际的内容却并没有修改，还是会返回整个请求的资源。<br>  为了解决这个可能存在的不准确问题，HTTP1.1推出了ETag实体首部字段。ETag是缓存的一个强校验器。<br>  客户端使用<code>If-None-Match</code>这个请求头字段来验证缓存。<br>  ⑴ If-None-Match: ETag-value<br>  告诉服务端如果 ETag 没匹配上需要重发资源数据，否则直接回送304 和响应报头即可。<br>  ⑵ If-Match: ETag-value<br>  若匹配不到ETag，或者收到了“*”值而当前并没有该资源实体，则应当返回412(Precondition Failed) 状态码给客户端。否则服务器直接忽略该字段。</p>
<blockquote>
<p>参考文章<br><a href="http://imweb.io/topic/5795dcb6fb312541492eda8c" target="_blank" rel="noopener">HTTP缓存控制小结</a><br><a href="http://www.cnblogs.com/vajoy/p/5341664.html" target="_blank" rel="noopener">浅谈浏览器http的缓存机制</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ" target="_blank" rel="noopener">HTTP 缓存 | MDN</a><br><a href="https://developers.google.com/web/fundamentals/performance/" target="_blank" rel="noopener">HTTP 缓存|Web|Google Developers</a>optimizing-content-efficiency/http-caching?hl=zh-cn]<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control" target="_blank" rel="noopener">Cache-Control</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[white-space]]></title>
      <url>/2017/06/01/white-space/</url>
      <content type="html"><![CDATA[<p>white-space CSS 属性是用来设置如何处理元素中的空白。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>Formal syntax: normal | pre | nowrap | pre-wrap | pre-line<br>white-space: normal<br>white-space: nowrap<br>white-space: pre<br>white-space: pre-wrap<br>white-space: pre-line</p>
<p>normal<br>  连续的空白符会被合并，换行符会被当作空白符来处理。填充line盒子时，必要的话会换行。<br>nowrap<br>  和 normal 一样，连续的空白符会被合并。但文本内的换行无效。<br>pre<br>  连续的空白符会被保留。在遇到换行符或者<br>元素时才会换行。<br>pre-wrap<br>  连续的空白符会被保留。在遇到换行符或者<br>元素，或者需要为了填充line盒子时才会换行。<br>pre-line<br>  连续的空白符会被合并。在遇到换行符或者<br>元素，或者需要为了填充line盒子时会换行。</p>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:left">换行符</th>
<th style="text-align:left">空格和制表符</th>
<th>文字转行</th>
</tr>
</thead>
<tbody>
<tr>
<td>normal</td>
<td style="text-align:left">合并</td>
<td style="text-align:left">合并</td>
<td>转行</td>
</tr>
<tr>
<td>nowrap</td>
<td style="text-align:left">合并</td>
<td style="text-align:left">合并</td>
<td>不转行</td>
</tr>
<tr>
<td>pre</td>
<td style="text-align:left">保留</td>
<td style="text-align:left">保留</td>
<td>不转行</td>
</tr>
<tr>
<td>pre-wrap</td>
<td style="text-align:left">保留</td>
<td style="text-align:left">保留</td>
<td>转行</td>
</tr>
<tr>
<td>pre-line</td>
<td style="text-align:left">保留</td>
<td style="text-align:left">合并</td>
<td>转行</td>
</tr>
</tbody>
</table>
<blockquote>
<p>参考<br><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/white-space?v=example" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/CSS/white-space?v=example</a><br><a href="https://css-tricks.com/almanac/properties/w/whitespace/" target="_blank" rel="noopener">white-space</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[不同手机按比例缩放]]></title>
      <url>/2017/05/22/%E4%B8%8D%E5%90%8C%E6%89%8B%E6%9C%BA%E6%8C%89%E6%AF%94%E4%BE%8B%E7%BC%A9%E6%94%BE/</url>
      <content type="html"><![CDATA[<h2 id="viewport方案"><a href="#viewport方案" class="headerlink" title="viewport方案"></a>viewport方案</h2><p>参考阿里的动态rem</p>
<p><a href="https://github.com/amfe/lib-flexible" target="_blank" rel="noopener">lib-flexible</a></p>
<h2 id="动态rem"><a href="#动态rem" class="headerlink" title="动态rem"></a>动态rem</h2><p><a href="https://github.com/gl09025/demos/blob/master/34lesson-rem/rem.html" target="_blank" rel="noopener">代码预览</a></p>
<p>写上<code>meta:vp</code> 标签</p>
<pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, user-scalable<span class="token punctuation">=</span>no, initial-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0, minimum-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
</code></pre>
<p>获取当前缩放比例并写入页面中（这里设计稿屏幕宽度为320px）</p>
<pre class=" language-javascript"><code class="language-javascript">    <span class="token operator">&lt;</span>script<span class="token operator">></span>
        <span class="token keyword">var</span> width <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth
        <span class="token keyword">var</span> scale <span class="token operator">=</span> width <span class="token operator">/</span> <span class="token number">320</span>
        <span class="token keyword">var</span> css <span class="token operator">=</span> <span class="token template-string"><span class="token string">`
        html{
            font-size: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>scale <span class="token operator">*</span> <span class="token number">320</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px;
        }
        `</span></span>
        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`&lt;style></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>css<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/style>`</span></span><span class="token punctuation">)</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
</code></pre>
<p>将CSS中的单位都换成rem单位，缩放百分比按照设计稿和屏幕的比例，将现在CSS中的px单位除以320来获取比例，例如原来为<code>128px</code> ,用除以<code>128/320</code> 等于<code>0.4</code> ,就写成<code>0.4rem</code> </p>
<pre class=" language-css"><code class="language-css"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0.4</span>rem<span class="token punctuation">;</span>
</code></pre>
<p>一个个手动替换十分耗时间，我们可以使用scss来做。google搜索关键字<code>scss px to rem</code></p>
<h3 id="优化字体大小"><a href="#优化字体大小" class="headerlink" title="优化字体大小"></a>优化字体大小</h3><p>要将字体放大一定比例，上面的scale就需要缩小相同的比例。一放一缩</p>
<blockquote>
<p><strong>注意点</strong> </p>
</blockquote>
<p><strong>我们不能将字体设置的太小，chrome默认的最小字体为12，如果我们设置的小于12的话，浏览器会默认是12不会比你设置的小。</strong> </p>
<p>小结：</p>
<p>1.用meta:vp标签 禁止浏览器的980像素缩放。</p>
<p>2.设置html{font-size:设计稿宽度*缩放比例（就是页面宽度）/10 px}。</p>
<p>3.10 rem == 页面宽度。</p>
<p>4.所有单位都用rem == 所有长度都以页面宽度为基准。</p>
<p>5.页面可以兼容任何手机屏幕。</p>
<h2 id="设备的1像素"><a href="#设备的1像素" class="headerlink" title="设备的1像素"></a>设备的1像素</h2><p><a href="https://github.com/gl09025/demos/blob/master/34lesson-rem/1px.html" target="_blank" rel="noopener">代码预览</a></p>
<p>现在设备的1像素不一定是CSS里面的1像素，比如retina屏在普通的1像素里又分了四份。</p>
<p>我们可以在<a href="http://mydevice.io/" target="_blank" rel="noopener">mydevice网站</a> 查看自己设备的CSS像素比<code>CSS pixel-ratio</code> 。</p>
<p>下面摘取阿里网站一篇博客的一些概念，<a href="http://www.aliued.com/?p=3166" target="_blank" rel="noopener">移动端高清、多屏适配方案</a></p>
<blockquote>
<h3 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h3><p>在进行具体的分析之前，首先得知道下面这些关键性基本概念(术语)。</p>
<h5 id="物理像素-physical-pixel"><a href="#物理像素-physical-pixel" class="headerlink" title="物理像素(physical pixel)"></a>物理像素(physical pixel)</h5><p>一个物理像素是显示器(手机屏幕)上最小的物理显示单元，在操作系统的调度下，每一个设备像素都有自己的颜色值和亮度值。</p>
<h5 id="设备独立像素-density-independent-pixel"><a href="#设备独立像素-density-independent-pixel" class="headerlink" title="设备独立像素(density-independent pixel)"></a>设备独立像素(density-independent pixel)</h5><p>设备独立像素(也叫密度无关像素)，可以认为是计算机坐标系统中得一个点，这个点代表一个可以由程序使用的虚拟像素(比如: css像素)，然后由相关系统转换为物理像素。</p>
<p>所以说，物理像素和设备独立像素之间存在着一定的<code>对应关系</code>，这就是接下来要说的<code>设备像素比</code>。</p>
<h5 id="设备像素比-device-pixel-ratio"><a href="#设备像素比-device-pixel-ratio" class="headerlink" title="设备像素比(device pixel ratio )"></a>设备像素比(device pixel ratio )</h5><p>设备像素比(简称dpr)定义了物理像素和设备独立像素的对应关系，它的值可以按如下的公式的得到：</p>
<pre><code>设备像素比 = 物理像素 / 设备独立像素 // 在某一方向上，x方向或者y方向
</code></pre><p>在javascript中，可以通过<code>window.devicePixelRatio</code>获取到当前设备的dpr。</p>
<p>在css中，可以通过<code>-webkit-device-pixel-ratio</code>，<code>-webkit-min-device-pixel-ratio</code>和 <code>-webkit-max-device-pixel-ratio</code>进行媒体查询，对不同dpr的设备，做一些样式适配(这里只针对webkit内核的浏览器和webview)。</p>
</blockquote>
<p>小结：</p>
<p>1.在普通屏幕</p>
<p>​    CSS 1px == 设备的1px</p>
<p>2.在Retina</p>
<p>​    CSS 1px == 设备的2px</p>
<p>​    需求要border-width == 设备的1px</p>
<p>​    设置border-width:0.5px == 设备的1px（兼容性有问题）</p>
<p>3.解决</p>
<p>​    页面整体缩放50%，<meta ...initial="0.5..."> border-width: 1px == 设备的1px</p>
<p>​    副作用：所有div都变为原来的50%</p>
<p>​    所有长度都以rem为基准，让rem变为原来的2倍</p>
<pre class=" language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
        //整体缩放
        var scale = 1 / window.devicePixelRatio
        document.write(`
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user-scalable<span class="token punctuation">=</span>no, initial-scale<span class="token punctuation">=</span>${scale}, maximum-scale<span class="token punctuation">=</span>${scale}, minimum-scale<span class="token punctuation">=</span>${scale}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    `)
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
        var width = document.documentElement.clientWidth / window.devicePixelRatio
        //缩放了多少再乘以多少，还原回去
        var css = `
        html{
            font-size: ${width / 10 * window.devicePixelRatio}px;
        }
        `
        document.write(`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">$</span><span class="token punctuation">{</span>css<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>`)
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
......
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
        <span class="token selector"><span class="token id">#section1</span> </span><span class="token punctuation">{</span>
            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
            <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#ff0000</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
</code></pre>
<p>代码思路：</p>
<p>1.获取设备的像素比</p>
<p>2.initial-scale = 1/像素比</p>
<p>3.让rem变为rem * 像素比</p>
<p>4.border-top：1px solid red</p>
<blockquote>
<p>参考链接</p>
<p><a href="https://isux.tencent.com/web-app-rem.html" target="_blank" rel="noopener">web app变革之rem - 前端技术 - 腾讯ISUX</a></p>
<p><a href="http://www.aliued.com/?p=3166" target="_blank" rel="noopener">移动端高清、多屏适配方案</a></p>
<p><a href="http://www.alloyteam.com/2016/03/mobile-web-adaptation-tool-rem/" target="_blank" rel="noopener">移动web适配利器-rem</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript中的this]]></title>
      <url>/2017/05/17/JavaScript%E4%B8%AD%E7%9A%84this/</url>
      <content type="html"><![CDATA[<h1 id="最简单的解释"><a href="#最简单的解释" class="headerlink" title="最简单的解释"></a>最简单的解释</h1><p>this就是function.prototype.call()的第一个参数</p>
<h1 id="第一个参数是什么"><a href="#第一个参数是什么" class="headerlink" title="第一个参数是什么"></a>第一个参数是什么</h1><p>三种方法来确定call()的第一个参数<br>1.直接在控制台打出<code>console.log(this)</code><br>2.查看查看源代码。<br>3.查看API文档</p>
<p>通常我们通过查看文档来理解，实际写代码中可以使用第一种方法来判断<br>比如jQuery的<code>.on()</code>的文档说明</p>
<pre><code>当jQuery的调用处理程序时，this关键字指向的是当前正在执行事件的元素。对于直接事件而言，this 代表绑定事件的元素。对于代理事件而言，this 则代表了与 selector 相匹配的元素。(注意，如果事件是从后代元素冒泡上来的话，那么 this 就有可能不等于 event.target。)若要使用 jQuery 的相关方法，可以根据当前元素创建一个 jQuery 对象，即使用 $(this)。
</code></pre><p>再比如MDN关于this的一段文档</p>
<pre><code>DOM事件处理函数中的 this

当函数被用作事件处理函数时，它的this指向触发事件的元素
</code></pre><p>分割线</p>
<h1 id="This在箭头函数中的应用"><a href="#This在箭头函数中的应用" class="headerlink" title="This在箭头函数中的应用"></a>This在箭头函数中的应用</h1><p>箭头函数不使用this的四种标准规则，而是根据外层（函数或者全局）作用域来决定this。</p>
<p>我们来看一下箭头函数的词法作用域：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 返回一个箭头函数</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// this继承自foo()</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    a<span class="token punctuation">:</span> <span class="token number">2</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>
    a<span class="token punctuation">:</span> <span class="token number">3</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> bar <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
bar<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2, 不是3！</span>
</code></pre>
<p>foo()内部创建的箭头函数会捕获调用时foo()的this。由于foo()的this绑定到obj1，bar（引用箭头函数）的this也会绑定到obj1，箭头函数的绑定无法被修改。（new也不行!）</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>如果要判断一个运行中的函数的this绑定，就需要找到这个函数的直接调用位置。找到之后就可以顺序应用下面这四条规则来判断this的绑定对象。</p>
<ol>
<li>由new调用？绑定到新创建的对象。</li>
<li>由call或者apply（或者bind）调用？绑定到指定的对象。</li>
<li>由上下文对象调用？绑定到那个上下文对象。</li>
<li>默认：在严格模式下绑定到undefined，否则绑定到全局对象。</li>
</ol>
<p>参考资料<br><a href="http://www.jquery123.com/on/" target="_blank" rel="noopener">http://www.jquery123.com/on/</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this#DOM事件处理函数中的_this" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this#DOM事件处理函数中的_this</a></p>
<p><a href="http://www.codeceo.com/article/about-javascript-this.html" target="_blank" rel="noopener">http://www.codeceo.com/article/about-javascript-this.html</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DOM获取元素的方法]]></title>
      <url>/2017/04/17/DOM%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>操作DOM时我们经常需要获取元素,这里总结一下获取元素的方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>参数</th>
<th>特点</th>
</tr>
</thead>
<tbody>
<tr>
<td>document.getElementById(id)</td>
<td>ID</td>
<td>返回单个对象</td>
</tr>
<tr>
<td>document.getElementsByClassName(names)</td>
<td>class名称</td>
<td>返回集合</td>
</tr>
<tr>
<td>document.getElementsByName(name)</td>
<td>元素name属性</td>
<td>返回集合</td>
</tr>
<tr>
<td>document.getElementsByTagName(tagName)</td>
<td>标签名</td>
<td>返回集合</td>
</tr>
<tr>
<td>document.querySelector(selectors)</td>
<td>CSS选择器</td>
<td>返回单个对象</td>
</tr>
<tr>
<td>document.querySelectorAll(selectors)</td>
<td>CSS选择器</td>
<td>返回集合</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="document-getElementById"><a href="#document-getElementById" class="headerlink" title="document.getElementById()"></a>document.getElementById()</h2><p>返回一个匹配特定 <a href="https://developer.mozilla.org/en-US/docs/DOM/element.id" target="_blank" rel="noopener">ID</a>的元素.</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote>
<p>element = document.getElementById(id)</p>
</blockquote>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><blockquote>
<ul>
<li><code>element是一个</code> <a href="https://developer.mozilla.org/en-US/docs/DOM/element" target="_blank" rel="noopener">Element</a> 对象。如果当前文档中拥有特定ID的元素不存在则返回null.</li>
<li><code>id是大小写敏感的字符串，代表了所要查找的元素的唯一ID</code>.</li>
</ul>
</blockquote>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>getElementById example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
  function changeColor(newColor) {
    var elem = document.getElementById("para1");
    elem.style.color = newColor;
  }
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>para1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Some text here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeColor(<span class="token punctuation">'</span>blue<span class="token punctuation">'</span>);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>blue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="document-getElementsByClassName"><a href="#document-getElementsByClassName" class="headerlink" title="document.getElementsByClassName()"></a>document.getElementsByClassName()</h2><p>返回一个类似数组的对象，包含了所有指定 class 名称的子元素。当调用发生在document对象上时, 整个DOM都会被搜索, 包含根节点。你也可以在任意元素上调用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getElementsByClassName" target="_blank" rel="noopener"><code>getElementsByClassName()</code></a> 方法，它将返回的是以当前元素为根节点，所有指定class名称的子元素。</p>
<h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><blockquote>
<p>  var elements = document.getElementsByClassName(names); // or:                                                                                var elements = rootElement.getElementsByClassName(names);</p>
</blockquote>
<h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><blockquote>
<ul>
<li>elements 是查找到的所有元素的集合 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCollection" target="_blank" rel="noopener"><code>HTMLCollection</code></a> .</li>
<li>names 是一个字符串，表示用于匹配的 class 名称列表; class 名称通过空格分隔</li>
<li>getElementsByClassName 可以在任意的元素上调用，不仅仅是 document。 调用这个方法的元素将作为本次查找的根元素.</li>
</ul>
</blockquote>
<h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><pre class=" language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'red test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//class同时包括red和test</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'main'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在id 为'main'的元素的子节点中，获取所有class为'test'的元素</span>
</code></pre>
<h2 id="document-getElementsByName"><a href="#document-getElementsByName" class="headerlink" title="document.getElementsByName()"></a>document.getElementsByName()</h2><p>根据给定的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/name" target="_blank" rel="noopener"><code>name</code></a> 返回一个在 (X)HTML document的节点列表集合。</p>
<h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><blockquote>
<pre><code>elements = document.getElementsByName(name)
</code></pre></blockquote>
<h3 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h3><blockquote>
<ul>
<li><code>elements</code> 是一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList" target="_blank" rel="noopener"><code>NodeList</code></a> 集合。</li>
<li><code>name</code> 是元素的 <code>name</code> 属性的值。</li>
</ul>
</blockquote>
<h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
 ...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>down<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
var up_forms = document.getElementsByName("up");
console.log(up_forms[0].tagName); // returns "FORM"
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="document-getElementsByTagName"><a href="#document-getElementsByTagName" class="headerlink" title="document.getElementsByTagName()"></a>document.getElementsByTagName()</h2><p>返回带有指定标签名的对象的集合.</p>
<h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><blockquote>
<pre><code>elements = element.getElementsByTagName(tagName)
</code></pre></blockquote>
<h3 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h3><blockquote>
<p><code>tagName</code> 必须放在引号中</p>
</blockquote>
<h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Coffee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Tea<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>单击“按钮”更改列表项的文本。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myFunction()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
function myFunction(){
    var list=document.getElementsByTagName("UL")[0]
    list.getElementsByTagName("LI")[0].innerHTML="Milk";
};
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="document-querySelector"><a href="#document-querySelector" class="headerlink" title="document.querySelector()"></a>document.querySelector()</h2><p>querySelector() 方法返回文档中匹配指定 CSS 选择器的一个元素。</p>
<h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><blockquote>
<pre><code>element = document.querySelector(selectors)
</code></pre></blockquote>
<h3 id="参数-4"><a href="#参数-4" class="headerlink" title="参数"></a>参数</h3><blockquote>
<p>selectors: css选择器</p>
</blockquote>
<h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h3><pre class=" language-html"><code class="language-html">  //获取文档中第一个 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span> 元素：
  document.querySelector("p")
  //获取文档中 class="example" 的第一个元素:
  document.querySelector(".example");
  //获取文档中 class="example" 的第一个 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span> 元素:
  document.querySelector("p.example");
  //获取文档中有 "target" 属性的第一个 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span> 元素：
  document.querySelector("a[target]");
</code></pre>
<h2 id="document-querySelectorAll"><a href="#document-querySelectorAll" class="headerlink" title="document.querySelectorAll()"></a>document.querySelectorAll()</h2><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><blockquote>
<pre><code>elementList = document.querySelectorAll(selectors);
</code></pre></blockquote>
<h3 id="参数-5"><a href="#参数-5" class="headerlink" title="参数"></a>参数</h3><blockquote>
<p>获取的是一个集合</p>
<p>selectors为css选择器</p>
</blockquote>
<h3 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//返回一个文档中所有的class为"note"或者 "alert"的div元素</span>
<span class="token keyword">var</span> matches <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"div.note, div.alert"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> DOM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用原生JS实现事件委托]]></title>
      <url>/2017/04/17/%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9FJS%E5%AE%9E%E7%8E%B0%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</url>
      <content type="html"><![CDATA[<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>在使用JavaScript与DOM交互时,事件是用到的比较多的.</p>
<p>JavaScript的事件机制是一个标准的观察者模式(<a href="https://zh.wikipedia.org/zh/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">Observer Pattern</a>),是一种抽象的订阅者和开发者的模式.我们可以在节点上添加上指定条件下的触发事件.</p>
<h2 id="事件绑定和事件监听"><a href="#事件绑定和事件监听" class="headerlink" title="事件绑定和事件监听"></a>事件绑定和事件监听</h2><p>在DOM level 0中事件是直接绑定的,比如</p>
<pre class=" language-javascript"><code class="language-javascript">buttom<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre>
<p>到了DOM level 2的时候增加了事件监听,比如</p>
<pre class=" language-javascript"><code class="language-javascript">button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>事件绑定的方法有个缺点就是它只能绑定一次,而使用<code>addEventListener</code> 可以绑定多个函数,执行顺序按照绑定的先后顺序来执行.</p>
<p>在使用过程中发现,如果我们在需要的元素上都添加了监听,那这是非常消耗资源和性能的,所以才有了事件委托.</p>
<h2 id="什么是事件委托"><a href="#什么是事件委托" class="headerlink" title="什么是事件委托"></a>什么是事件委托</h2><p>事件委托是为了避免我们在特定的每个节点上都添加事件监听器,而在父节点上来监听冒泡上来的事件.</p>
<p>事件委托是基于冒泡机制的,所以本篇重点关注冒泡阶段.浏览器的</p>
<h3 id="冒泡"><a href="#冒泡" class="headerlink" title="冒泡"></a>冒泡</h3><p>冒泡如下图所示,element2的事件先被触发,然后是element1</p>
<pre><code>               / \
---------------| |-----------------
| element1     | |                |
|   -----------| |-----------     |
|   |element2  | |          |     |
|   -------------------------     |
|        Event BUBBLING           |
-----------------------------------
</code></pre><h2 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h2><p>以下的例子我们都使用<code>addEventListener</code> ,其中参数<code>e</code> 为浏览器传给我们的一个包含了事件各种属性的对象.</p>
<h3 id="第一个例子"><a href="#第一个例子" class="headerlink" title="第一个例子"></a>第一个例子</h3><p>现在我们有一个需求,要在点击列表里面的时候在控制台打印出hello.</p>
<p>先写HTML,稍微加点样式    </p>
<pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
    <span class="token selector">li</span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token selector">ul</span><span class="token punctuation">{</span><span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">20</span>px solid green<span class="token punctuation">;</span><span class="token punctuation">}</span>
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>one<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>two<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>three<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>four<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<p>要在点击li的时候打出hello,</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> liName <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">'LI'</span> <span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//target为当前点击的元素</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//在每个li上添加监听</span>
liName<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>fn<span class="token punctuation">)</span>
liName<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>fn<span class="token punctuation">)</span>
liName<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>fn<span class="token punctuation">)</span>
liName<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>fn<span class="token punctuation">)</span>
</code></pre>
<p>每个元素上都添加监听是非常耗资源的,我们可以在li的父元素ul上添加一个监听事件</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> ulTest <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">'LI'</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//添加ul上的监听事件</span>
ulTest<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>fn<span class="token punctuation">)</span>
</code></pre>
<p>上面的代码同样可以达到同样的需求,而且占用的资源更少.</p>
<p>那么如果我们需要监听的元素不是li,而是li的子元素呢?</p>
<pre class=" language-html"><code class="language-html">......
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>one<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>two<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>three<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>four<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
......
</code></pre>
<p>改写:</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> ulTest <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> bodyTest <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> el <span class="token operator">=</span> e<span class="token punctuation">.</span>target  
  <span class="token keyword">while</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>tagName <span class="token operator">!==</span> <span class="token string">'LI'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    el <span class="token operator">=</span> el<span class="token punctuation">.</span>parentNode
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'111'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//添加ul上的监听事件</span>
ulTest<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>fn<span class="token punctuation">)</span>
</code></pre>
<p>上面的代码中,点击li中的span,ul也能够出发监听事件.会在用户点击的元素一级一级的往上找(冒泡),找到符合条件的就调用事件.</p>
<h3 id="第二个例子"><a href="#第二个例子" class="headerlink" title="第二个例子"></a>第二个例子</h3><p>在div中有p和h1,其中又各有一个span.我们需要在点击h1或h1里的span的时候触发事件.</p>
<pre class=" language-html"><code class="language-html">
<span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
    <span class="token selector">p</span><span class="token punctuation">{</span> <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token selector">h1</span><span class="token punctuation">{</span> <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token selector">span</span><span class="token punctuation">{</span> <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><span class="token punctuation">}</span>
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>p<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>我是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>h1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<p>JS</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>

div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> t <span class="token operator">=</span> e<span class="token punctuation">.</span>target
  <span class="token comment" spellcheck="true">//寻找H1节点</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>tagName <span class="token operator">!==</span> <span class="token string">'H1'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">===</span> div<span class="token punctuation">)</span><span class="token punctuation">{</span>
      t <span class="token operator">=</span> <span class="token keyword">null</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    t <span class="token operator">=</span> t<span class="token punctuation">.</span>parentNode
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你找到了h1'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你点击了其他元素'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>在上面的代码中,首先在最外层的div上添加监听事件,在while循环中我们判断当天的点击元素是否为H1元素,如果不是我们往上查找,直到查到H1元素.如果查到了最外层的div元素,证明没有在H1元素之内,我们就不需要再往上去查找了,所以这里我们将元素置为null.</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote>
<p><a href="http://pij.robinqu.me/Browser_Scripting/DOM_Scripting/EventAPI.html" target="_blank" rel="noopener">http://pij.robinqu.me/Browser_Scripting/DOM_Scripting/EventAPI.html</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener</a></p>
<p><a href="https://www.quirksmode.org/js/events_order.html" target="_blank" rel="noopener">https://www.quirksmode.org/js/events_order.html</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Event</a></p>
<p><a href="http://javascript.ruanyifeng.com/dom/event.html" target="_blank" rel="noopener">http://javascript.ruanyifeng.com/dom/event.html</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[表单提交与阻止默认动作]]></title>
      <url>/2017/03/27/%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4%E4%B8%8E%E9%98%BB%E6%AD%A2%E9%BB%98%E8%AE%A4%E5%8A%A8%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>假设有以下简单的表单，来看看提交与阻止提交那些事儿：</p>
<pre class=" language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aa.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>formName<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>formId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
</code></pre>
<p>要提交表单，需要表单内的一个type为”submit”或者”image”的input，但在html5年代，表单元素可以写在form表单外边，给它添加form属性值为对应form表单的id即可，比如上边的input#input-submit可以写到外边，就是</p>
<pre class=" language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>”submit”</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>”input-submit”</span> <span class="token attr-name">form</span><span class="token attr-value"><span class="token punctuation">=</span>”formId”</span><span class="token punctuation">></span></span>
</code></pre>
<p>但为了兼容IE8等久时代浏览器，还是写里边为好。<br>其实要把表单提交，只要form里边有获得焦点的文本框，按下Enter键就会提交，即使没有任何input[type=”submit”]之类。这样显然不人性化易误触，会通过监听keydown事件防止提交。而且很多人都不知道还能这样子提交，所以一般都给出提交按钮。<br>有提交功能的input[type=”submit”]不说了，如何让点击其他没有提交功能的按钮也提交呢？可以通过form表单的submit()方法来实现。首先要选择到这个form，除了常规的byId，byClassName等，以下两种可能用得不多：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span>formName<span class="token punctuation">;</span>
<span class="token keyword">var</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre>
<p>这两种方法也是可以获得表单的。有了表单执行submit()方法即可提交。这里有个小问题需要注意一下，为何我上边的input[type=”submit”]的id要写”input-submit”不写”submit”完事？这也郁闷一阵才发现，假如为username加上id为username，提交按钮的id改为submit：</p>
<p><img src="https://raw.githubusercontent.com/gl09025/blog/master/images/%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4/submit.jpg" alt="通过id找到了具体元素"></p>
<p>如果存在id为”submit”的子元素，会将document.formName.submit看成一个dom对象，对象非方法，就报错了！所以如果需要js主动提交，表单内不应该有id为submit的元素。<br>有提交就有阻止提交，尤其需要进行表单验证的时候，下面说说我知道的方法。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>
<span class="token keyword">var</span> ID <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> addEvent <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> type<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span><span class="token punctuation">{</span>
        elem<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> func<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> r <span class="token operator">=</span> elem<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token operator">+</span>type<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> r<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        elem<span class="token punctuation">[</span><span class="token string">"on"</span><span class="token operator">+</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> func<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 1、使用submit按钮来提交，在提交按钮上作文章</span>
<span class="token function">addEvent</span><span class="token punctuation">(</span><span class="token function">ID</span><span class="token punctuation">(</span><span class="token string">"input-submit"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> event <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// return false;//IE8可行，Chrome,Firefox不行</span>
    <span class="token comment" spellcheck="true">// event.returnValue = false;//IE8,Chrome可行，Firefox不行</span>
    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//IE8不行，Chrome,Firefox可行</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//2、使用submit按钮来提交，通过DOM2级事件监听onsubmit</span>
<span class="token function">addEvent</span><span class="token punctuation">(</span><span class="token function">ID</span><span class="token punctuation">(</span><span class="token string">"formId"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"submit"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> event <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//结论同上</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//3、使用submit按钮来提交，通过DOM0级事件监听onsubmit</span>
<span class="token comment" spellcheck="true">//在form上添加onsubmit，&lt;form ... onsubmit="return checkForm()" ...></span>
<span class="token comment" spellcheck="true">//注意不能只写checkForm()，需要return这个函数的返回值</span>
<span class="token keyword">function</span> <span class="token function">checkForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment" spellcheck="true">//do something validation...</span>
<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只需return false，全面通杀！</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//4、不使用传统submit按钮而使用form.submit()方法主动提交</span>
<span class="token function">addEvent</span><span class="token punctuation">(</span><span class="token function">ID</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">var</span> event <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//something validation...</span>
    document<span class="token punctuation">.</span>formName<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//不提交当然就“阻止”了，全通杀！</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
</code></pre>
<p>以上，感觉后两种比较easy…在方法4中，可能有人只做form.submit()这件事而把验证放到3的onsubmit事件中进行，注意这样是不行的，使用form.submit()提交时不会有onsubmit事件的触发！只有通过传统submit按钮提交才会有onsubmit事件触发。<br>方法1，2中是使用了阻止默认动作的方法，可以看到reutrn false，event.returnValue=false，event.preventDefault()三种办法兼容性不太一样，但总有一个有效！除了阻止表单提交用到，其他常见的还有比如阻止checkbox被选，阻止a链接跳转等等，如果不需要任何判断直接需要阻止，最简单的还是DOM0级添加onclick=”return false”。</p>
<blockquote>
<p><a href="http://www.xiaomlove.com/2014/12/25/%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4%E4%B8%8E%E9%98%BB%E6%AD%A2%E9%BB%98%E8%AE%A4%E5%8A%A8%E4%BD%9C/" target="_blank" rel="noopener">原文链接</a></p>
</blockquote>
<h3 id="onsubmit"><a href="#onsubmit" class="headerlink" title="onsubmit"></a>onsubmit</h3><h3 id="addEventListener"><a href="#addEventListener" class="headerlink" title="addEventListener"></a>addEventListener</h3><h3 id="window-load"><a href="#window-load" class="headerlink" title="window.load"></a>window.load</h3><p><a href="http://www.softwhy.com/forum.php?mod=viewthread&amp;tid=6191" target="_blank" rel="noopener">http://www.softwhy.com/forum.php?mod=viewthread&amp;tid=6191</a></p>
<h3 id="preventDefault"><a href="#preventDefault" class="headerlink" title="preventDefault"></a>preventDefault</h3>]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> HTML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS居中小结]]></title>
      <url>/2017/03/22/CSS%E5%B1%85%E4%B8%AD%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>最近在学习CSS居中,居中里面又包含水平居中和垂直居中,分不太清内联元素(inline or inline-* elements)和块元素(block level element)居中到底应该怎么来居中,记住一个忘了另一个.翻译一篇CSS-TRICKS上的居中完全指南来理清自己的思绪.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display#Values" target="_blank" rel="noopener">内联元素有哪些</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements" target="_blank" rel="noopener">块元素有哪些</a></p>
<h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><h3 id="内联或者内联相关元素-像text或者links"><a href="#内联或者内联相关元素-像text或者links" class="headerlink" title="内联或者内联相关元素(像text或者links)"></a>内联或者内联相关元素(像text或者links)</h3><p>在块级别的父元素中添加<code>text-align: center;</code> 属性</p>
<p><a href="http://js.jirengu.com/gosa/5/watch?html,css,output" target="_blank" rel="noopener">在线示例</a></p>
<p><img src="https://raw.githubusercontent.com/gl09025/blog/master/images/CSSjuzhongxiaojie/%E5%86%85%E8%81%94%E5%85%83%E7%B4%A0%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD.png" alt="内联元素水平居中"></p>
<h3 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h3><p>在自身CSS中添加属性<code>margin: 0 auto;</code> 这个就相当于<code>margin-left: auto;</code> <code>margin-right: auto;</code> ,当然这里有一个宽度才能看到效果,当块元素没有宽度的时候,会自动铺满整行.</p>
<p><a href="http://js.jirengu.com/gosa/3/watch?html,css,output" target="_blank" rel="noopener">在线示例</a></p>
<p><img src="https://raw.githubusercontent.com/gl09025/blog/master/images/CSSjuzhongxiaojie/%E5%9D%97%E5%85%83%E7%B4%A0%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD.png" alt="块元素水平居中"></p>
<p>注意:我们不能让有<code>float</code> 属性的元素居中</p>
<h3 id="多个块元素居中"><a href="#多个块元素居中" class="headerlink" title="多个块元素居中"></a>多个块元素居中</h3><p>如果现在有两个或以上的块元素,我们又需要在一行上居中.我们就可以使用<code>display</code> 来转换成其他类型.比如我们这里变成<code>inline-block</code> 或变成flexbox</p>
<p><a href="http://js.jirengu.com/gosa/2/watch?html,css,output" target="_blank" rel="noopener">在线示例</a></p>
<p><img src="https://raw.githubusercontent.com/gl09025/blog/master/images/CSSjuzhongxiaojie/%E5%A4%9A%E4%B8%AA%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E5%9C%A8%E4%B8%80%E8%A1%8C%E5%B1%85%E4%B8%AD.png" alt="多个块级元素在一行居中"></p>
<p>当多个块级元素占不同行的时候,也可以时间居中.</p>
<p><a href="http://js.jirengu.com/bewi/2/watch?html,css,output" target="_blank" rel="noopener">在线示例</a></p>
<p><img src="https://raw.githubusercontent.com/gl09025/blog/master/images/CSSjuzhongxiaojie/%E5%A4%9A%E4%B8%AA%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E4%B8%8D%E5%9C%A8%E4%B8%80%E8%A1%8C%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD.png" alt="多个块级元素不在一行水平居中"></p>
<h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><p>垂直居中比水平居中要复杂.</p>
<h3 id="内联或者内联相关元素-像text或者links-1"><a href="#内联或者内联相关元素-像text或者links-1" class="headerlink" title="内联或者内联相关元素(像text或者links)"></a>内联或者内联相关元素(像text或者links)</h3><h4 id="单行"><a href="#单行" class="headerlink" title="单行"></a>单行</h4><p>当单行内联元素有上下相等的padding的时候,可以垂直居中.</p>
<p><a href="http://js.jirengu.com/gosa/7/watch?html,css,output" target="_blank" rel="noopener">在线示例</a></p>
<p><img src="https://raw.githubusercontent.com/gl09025/blog/master/images/CSSjuzhongxiaojie/%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD-%E5%8D%95%E8%A1%8C%E5%86%85%E8%81%94%E5%85%83%E7%B4%A0.png" alt="垂直居中-单行内联元素"></p>
<p>如果padding因为某种原因不能改,有个小技巧是设置<code>line-height</code> 和<code>height</code> 一样来达到垂直居中的效果.</p>
<p><a href="http://js.jirengu.com/gosa/8/watch?html,css,output" target="_blank" rel="noopener">在线示例</a></p>
<p><img src="https://raw.githubusercontent.com/gl09025/blog/master/images/CSSjuzhongxiaojie/%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD-%E5%9D%97%E5%86%85%E6%9C%89%E6%96%87%E5%AD%97.png" alt="垂直居中-块内有文字"></p>
<h4 id="多行"><a href="#多行" class="headerlink" title="多行"></a>多行</h4><p>给定上下的padding一样可以作用于多行的文本,如果没有起作用的话,可能这个元素里面的文字类型是table cell.我们可以使用<code>vertical-align</code> 来处理</p>
<p><a href="http://js.jirengu.com/jeya/1/watch?html,css,output" target="_blank" rel="noopener">在线示例</a></p>
<p><img src="https://raw.githubusercontent.com/gl09025/blog/master/images/CSSjuzhongxiaojie/%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD-flexbox.png" alt="垂直居中-table cell"></p>
<p>现在貌似使用table已经不推荐使用了,那我们可以使用flexbox,用flexbox就十分的easy了.设置如下属性就行</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.flex-center-vertically</span> </span><span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><a href="http://js.jirengu.com/hoke/1/watch?html,css,output" target="_blank" rel="noopener">在线示例</a></p>
<p><img src="https://raw.githubusercontent.com/gl09025/blog/master/images/CSSjuzhongxiaojie/%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD-%E5%88%A9%E7%94%A8before%E4%BC%AA%E5%85%83%E7%B4%A0.png" alt="垂直居中-flexbox"></p>
<p>上面的flex实现的垂直居中是在父元素有固定高度的情况下生效的.</p>
<p>如果上面两个方法都不流行了的话,那我们还可以使用”ghost element”,就是我们说的伪元素</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.ghost-center</span> </span><span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.ghost-center</span><span class="token pseudo-element">::before</span> </span><span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">" "</span><span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1%</span><span class="token punctuation">;</span>
  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.ghost-center</span> p </span><span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><a href="http://js.jirengu.com/rohiz/1/watch?html,css,output" target="_blank" rel="noopener">在线示例</a></p>
<p><img src="https://raw.githubusercontent.com/gl09025/blog/master/images/CSSjuzhongxiaojie/%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD-%E5%9D%97%E5%85%83%E7%B4%A0-%E6%9C%89%E9%AB%98%E5%BA%A6.png" alt="垂直居中-利用before伪元素"></p>
<h3 id="块元素-1"><a href="#块元素-1" class="headerlink" title="块元素"></a>块元素</h3><h4 id="知道元素的高度"><a href="#知道元素的高度" class="headerlink" title="知道元素的高度"></a>知道元素的高度</h4><p>一般我们不会设置高度,因为当宽度变化的时候,里面的文本内容会去自动改变父元素的高度.文字样式的变化可以改变高度.文字数量的变化可以改变高度.有固定长宽比的元素比如图像可以在调整大小时改变高度.等等.</p>
<p>如果我们知道高度的话可以这么写</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.parent</span> </span><span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.child</span> </span><span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
  <span class="token property">margin-top</span><span class="token punctuation">:</span> -<span class="token number">50</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* account for padding and border if not using box-sizing: border-box; */</span>
<span class="token punctuation">}</span>
</code></pre>
<p><a href="http://js.jirengu.com/gede/1/watch?html,css,output" target="_blank" rel="noopener">在线示例</a></p>
<p><img src="https://raw.githubusercontent.com/gl09025/blog/master/images/CSSjuzhongxiaojie/%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD-%E5%9D%97%E5%85%83%E7%B4%A0-%E6%9C%89%E9%AB%98%E5%BA%A6.png" alt="垂直居中-块元素-有高度"></p>
<h4 id="不知道元素的高度"><a href="#不知道元素的高度" class="headerlink" title="不知道元素的高度"></a>不知道元素的高度</h4><p>我们仍然可以用定位来实现</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.parent</span> </span><span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.child</span> </span><span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><a href="http://js.jirengu.com/rata/1/watch?html,css,output" target="_blank" rel="noopener">在线示例</a></p>
<p><img src="https://raw.githubusercontent.com/gl09025/blog/master/images/CSSjuzhongxiaojie/%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD-%E5%9D%97%E5%85%83%E7%B4%A0-%E4%B8%8D%E7%9F%A5%E9%81%93%E9%AB%98%E5%BA%A6.png" alt="垂直居中-块元素-不知道高度"></p>
<h4 id="使用flexbox"><a href="#使用flexbox" class="headerlink" title="使用flexbox?"></a>使用flexbox?</h4><p>使用flexbox就比较简单了</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.parent</span> </span><span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>
  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><a href="http://js.jirengu.com/wapu/1/watch?html,css,output" target="_blank" rel="noopener">在线示例</a></p>
<p><img src="https://raw.githubusercontent.com/gl09025/blog/master/images/CSSjuzhongxiaojie/%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD-%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0-flexbox.png" alt="垂直居中-块级元素-flexbox"></p>
<h2 id="水平和垂直居中"><a href="#水平和垂直居中" class="headerlink" title="水平和垂直居中"></a>水平和垂直居中</h2><p>我们可以结合上面的水平居中和垂直居中来完成水平和垂直的同时居中.通常有以下三种情况</p>
<h3 id="有固定的高度和宽度的元素"><a href="#有固定的高度和宽度的元素" class="headerlink" title="有固定的高度和宽度的元素"></a>有固定的高度和宽度的元素</h3><p>知道宽高的情况下我们一般需要算一下距离上面和左边多少,使用定位来实现.</p>
<p><a href="http://js.jirengu.com/yoyi/1/watch?html,css,output" target="_blank" rel="noopener">在线示例</a></p>
<p><img src="https://raw.githubusercontent.com/gl09025/blog/master/images/CSSjuzhongxiaojie/%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD-%E5%9B%BA%E5%AE%9A%E5%AE%BD%E9%AB%98%E6%AF%94.png" alt="水平垂直居中-固定宽高比"></p>
<h3 id="无固定高度和宽度的元素"><a href="#无固定高度和宽度的元素" class="headerlink" title="无固定高度和宽度的元素"></a>无固定高度和宽度的元素</h3><p>不知道宽高,我们也使用定位来实现,这次我们就不需要计算距离,使用50%的translate来实现</p>
<pre class=" language-CSS"><code class="language-CSS">.parent {
  position: relative;
}
.child {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
</code></pre>
<p><a href="http://js.jirengu.com/vanom/1/watch?html,css,output" target="_blank" rel="noopener">在线示例</a></p>
<p><img src="https://raw.githubusercontent.com/gl09025/blog/master/images/CSSjuzhongxiaojie/%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD-%E6%97%A0%E5%9B%BA%E5%AE%9A%E5%AE%BD%E9%AB%98%E6%AF%94.png" alt="水平垂直居中-无固定宽高比"></p>
<h3 id="方便的flexbox"><a href="#方便的flexbox" class="headerlink" title="方便的flexbox"></a>方便的flexbox</h3><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.parent</span> </span><span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><a href="http://js.jirengu.com/jomi/1/watch?html,css,output" target="_blank" rel="noopener">在线示例</a></p>
<p><img src="https://raw.githubusercontent.com/gl09025/blog/master/images/CSSjuzhongxiaojie/%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD-flexbox.png" alt="水平垂直居中-flexbox"></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>看到了这么多,发现使用flex是最方便的.关于flexbox的兼容性我们可以<a href="http://caniuse.com/flexbox" target="_blank" rel="noopener">点击这里</a>看到.现在我们在写网页的时候能不带宽高的就尽量不要带宽高.</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
            <tag> README </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[什么是字符编码]]></title>
      <url>/2017/03/05/%E4%BB%80%E4%B9%88%E6%98%AF%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</url>
      <content type="html"><![CDATA[<h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p>简单的说字符集就是一张表，一张存储了文字和二进制对应的表。<br>我们知道计算机存储信息都是以二进制来存储的，那么二进制又是用来表示我们所熟知的文字或者符号呢？这就需要一个表来标注好对应关系。在以前我们拥有很多的字符集，因为每个国家的字符都不太一样，都是各自为营制作字符集。后来有组织为了统一各个国家的字符，制作了<code>Unicode</code> 字符集，Unicode1.0版本在1991年10月发布。</p>
<p>我们来看一下<a href="http://www.knowsky.com/resource/gb2312tbl.htm" target="_blank" rel="noopener">GB2312简体中文编码表</a><br>这里列出一部分表：</p>
<table>
<thead>
<tr>
<th>code</th>
<th>+0</th>
<th>+1</th>
<th>+2</th>
<th>+3</th>
<th>+4</th>
<th>+5</th>
<th>+6</th>
<th>+7</th>
<th>+8</th>
<th>+9</th>
<th>+A</th>
<th>+B</th>
<th>+C</th>
<th>+D</th>
<th>+E</th>
<th>+F</th>
</tr>
</thead>
<tbody>
<tr>
<td>A1A0</td>
<td></td>
<td></td>
<td>、</td>
<td>。</td>
<td>·</td>
<td>ˉ</td>
<td>ˇ</td>
<td>¨</td>
<td>〃</td>
<td>々</td>
<td>—</td>
<td>～</td>
<td>‖</td>
<td>…</td>
<td>‘</td>
<td>’</td>
</tr>
<tr>
<td>A1B0</td>
<td>“</td>
<td>”</td>
<td>〔</td>
<td>〕</td>
<td>〈</td>
<td>〉</td>
<td>《</td>
<td>》</td>
<td>「</td>
<td>」</td>
<td>『</td>
<td>』</td>
<td>〖</td>
<td>〗</td>
<td>【</td>
<td>】</td>
</tr>
<tr>
<td>A1C0</td>
<td>±</td>
<td>×</td>
<td>÷</td>
<td>∶</td>
<td>∧</td>
<td>∨</td>
<td>∑</td>
<td>∏</td>
<td>∪</td>
<td>∩</td>
<td>∈</td>
<td>∷</td>
<td>√</td>
<td>⊥</td>
<td>∥</td>
<td>∠</td>
</tr>
</tbody>
</table>
<p>其中<code>、</code> 这个对应的编码是<code>A1A2</code><br>上面给出的是中国的GB2312编码，但只适用于中文汉字。世界上有许多的语言，为了统一标准就有人做一个字符集来包含几乎所有的语言。这就是<code>Unicode</code> </p>
<h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><p>编码和字符集的不同在于，编码其实是一种算法。<br>那既然我们已经有了字符集了，为什么我们还需要字符编码呢？<br>理论上我们其实只需要在计算机中存储<code>Unicode</code> 这个字符集就够了。但实际情况是怎么样的呢？<br>举个例子，我们存储<code>a</code> 这个字母。Unicode字符集和UTF-8存储对比</p>
<table>
<thead>
<tr>
<th>Unicode</th>
<th>00000000 00000000 00000000 0110001</th>
</tr>
</thead>
<tbody>
<tr>
<td>UTF-8</td>
<td>01100001</td>
</tr>
</tbody>
</table>
<p>我们发现UTF-8占的空间要少的多。<br>实际情况是因为那个时候的计算机存储不像现在有这么大，为了考虑到存储空间的限制，我们需要一个算法来减少字符集的存储空间。现在我们一直使用的<code>UTF-8</code> 就是字符编码。</p>
<h2 id="字符集和字符编码的关系"><a href="#字符集和字符编码的关系" class="headerlink" title="字符集和字符编码的关系"></a>字符集和字符编码的关系</h2><p>像我们上文所说的 <code>Unicode</code> 和 <code>UTF-8</code> ，<code>Unicode</code> 是几乎涵盖了各个国家的文字和字符，<code>UTF-8</code> 则是目前用的最广的字符编码。UTF-8是为了减少Unicode的存储空间而设计的一种算法。</p>
<p>参考</p>
<p><a href="https://zh.wikipedia.org/zh-hans/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81#.E5.AD.97.E7.AC.A6.E8.BD.AC.E6.8D.A2.E5.B7.A5.E5.85.B7" target="_blank" rel="noopener">字符编码</a><br><a href="http://cenalulu.github.io/linux/character-encoding/" target="_blank" rel="noopener">十分钟搞清字符集和字符编码</a><br><a href="http://wiki.jikexueyuan.com/project/visual-studio/15.html" target="_blank" rel="noopener">字符集和字符编码</a><br><a href="http://www.jianshu.com/p/d38a79a4f0f4#" target="_blank" rel="noopener">字符集历史和乱码问题（一）</a><br><a href="http://www.jianshu.com/p/bbff844afefa" target="_blank" rel="noopener">字符集历史和乱码问题（二）</a></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Unicode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTTP基础]]></title>
      <url>/2017/02/25/HTTP%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<p>HTTP：Hyper Text Transfer Protocol:超文本传输协议</p>
<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>定义：一个管理资源并为用户提供服务的机器。<br>服务器在硬件和软件上都与个人PC不同。<br>硬件：具有较高的计算能力，能够提供给多个用户使用。需要7X24小时的连续工作，更稳定。<br>软件：服务器软件工作在客户端-服务器或浏览器-服务器的方式，有很多形式的服务器，比如：网页服务器，文件服务器。</p>
<h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><p>网域名称系统（Domain Name System）是互联网的一项服务。作用是将域名和IP地址相互映射的一个分布式数据库。<br>比如我们通常访问一个网站的时候，是在浏览器的地址栏里输入网址，当我们在输入baidu.com这个网址的时候，浏览器会向域名服务器去查找有没有这条记录。我们用ping可以返回网址的IP<br><img src="https://raw.githubusercontent.com/gl09025/blog/master/images/ping.png" alt=""><br>我们直接输入图中的220.181.57.217（各地区有所不同）这个IP地址也是可以访问的。因为IP地址是很难记住的，所以网址可以让我们更好的记住并访问。<br>一个网址可以对应多个IP，同样的一个IP可以对应多个网址。</p>
<h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>端口是服务器启动服务的时候所占用的端口，依照互联网传输层TCP/IP协议不同的协议通信，都有不同的对应端口。一个端口对应一个服务。<br>0-1023为保留端口。<br>常用的端口：</p>
<ul>
<li>21：FTP</li>
<li>53：DNS</li>
<li>80：HTTP</li>
<li>443：HTTPS</li>
<li>1080：SOCKS代理</li>
</ul>
<h2 id="请求-amp-响应"><a href="#请求-amp-响应" class="headerlink" title="请求&amp;响应"></a>请求&amp;响应</h2><p>客户端向服务器发送请求，服务器接收到请求之后给客户端响应客户端所需要的内容。</p>
<h3 id="分析请求"><a href="#分析请求" class="headerlink" title="分析请求"></a>分析请求</h3><p><img src="https://raw.githubusercontent.com/gl09025/blog/master/images/%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%E4%B8%80%E8%88%AC%E6%A0%BC%E5%BC%8F.png" alt=""><br>一个浏览器的请求</p>
<pre><code>GET /index.html HTTP/1.1
Host: 101.200.33.143:9999
Connection: keep-alive
Pragma: no-cache
Cache-Control: no-cache
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate, sdch
Accept-Language: en-US,en;q=0.8,zh-CN;q=0.6,zh;q=0.4,zh-TW;q=0.2
Content-Type: application/x-www-form-urlencoded
</code></pre><p>请求主要分为四个部分：<br>第一部分：请求行 <code>GET /index.html HTTP/1.1</code> 动词  URL 协议版本/版本号<br>第二部分：请求头(请求头部有很多个)<br>            Host: 1.2.3.4<br>            Accept: html, xhtml, xml<br>            User-agent: Chrome / Mac<br>            定义第四部分格式：application/x-www-form-urlencoded<br>第三部分：回车<br>第四部分：消息体。比如username=xxxx&amp;passwd=yyyy</p>
<h3 id="分析响应"><a href="#分析响应" class="headerlink" title="分析响应"></a>分析响应</h3><p>响应头对应请求头也有四部分：<br>第一部分：状态行：      协议  状态码  状态描述<br>第二部分：响应头：<br>                Content-type: text/html; charset=utf-8<br>                Server: bfe/1.0.8.18<br>                Date: Fri, 24 Feb 2017 13:05:48 GMT</p>
<p>第三部分：回车<br>第四部分：消息体<br>                &lt;!DOCTYPE html&gt;<br>                <html><br>                ……<br>                </html></p>
<p>在命令行中使用 <code>curl -I</code> 或 <code>curl --head</code> 获取响应头</p>
<p><img src="https://github.com/gl09025/blog/raw/master/images/curl%E8%8E%B7%E5%8F%96%E5%93%8D%E5%BA%94%E5%A4%B4.png" alt=""></p>
<p><code>curl -D -</code> 可以获取到响应头和响应体</p>
<p><img src="https://raw.githubusercontent.com/gl09025/blog/master/images/curl%E8%8E%B7%E5%8F%96%E5%93%8D%E5%BA%94%E5%A4%B4%E5%92%8C%E5%93%8D%E5%BA%94%E4%BD%93.png" alt=""></p>
<h4 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h4><table>
<thead>
<tr>
<th style="text-align:center">状态码</th>
<th style="text-align:center">英文含义</th>
<th style="text-align:center">中文含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">200</td>
<td style="text-align:center">OK</td>
<td style="text-align:center">请求已成功，请求所希望的响应头或数据体将随此响应返回。</td>
</tr>
<tr>
<td style="text-align:center">301</td>
<td style="text-align:center">Moved Permanently</td>
<td style="text-align:center">被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。</td>
</tr>
<tr>
<td style="text-align:center">302</td>
<td style="text-align:center">Found</td>
<td style="text-align:center">请求的资源现在临时从不同的URI响应请求。</td>
</tr>
<tr>
<td style="text-align:center">304</td>
<td style="text-align:center">Not Modified</td>
<td style="text-align:center">如果客户端发送了一个带条件的GET请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。</td>
</tr>
<tr>
<td style="text-align:center">403</td>
<td style="text-align:center">Forbidden</td>
<td style="text-align:center">服务器已经理解请求，但是拒绝执行它。</td>
</tr>
<tr>
<td style="text-align:center">414</td>
<td style="text-align:center">Request-URI Too Long</td>
<td style="text-align:center">请求的URI长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。</td>
</tr>
<tr>
<td style="text-align:center">500</td>
<td style="text-align:center">Internal Server Error</td>
<td style="text-align:center">服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。</td>
</tr>
<tr>
<td style="text-align:center">502</td>
<td style="text-align:center">Bad Gateway</td>
<td style="text-align:center">作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</td>
</tr>
</tbody>
</table>
<h4 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h4><table>
<thead>
<tr>
<th style="text-align:center">动词</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">POST</td>
<td style="text-align:center">POST方法用于将实体提交到指定的资源，通常导致状态或服务器上的副作用的更改.</td>
</tr>
<tr>
<td style="text-align:center">DELETE</td>
<td style="text-align:center">DELETE方法删除指定的资源。PUT方法用请求有效载荷替换目标资源的所有当前表示。</td>
</tr>
<tr>
<td style="text-align:center">PUT</td>
<td style="text-align:center">PUT方法用请求有效载荷替换目标资源的所有当前表示。</td>
</tr>
<tr>
<td style="text-align:center">PATCH</td>
<td style="text-align:center">PATCH方法用于对资源应用部分修改。</td>
</tr>
<tr>
<td style="text-align:center">GET</td>
<td style="text-align:center">GET方法请求一个指定资源的表示形式. 使用GET的请求应该只被用于获取数据.</td>
</tr>
<tr>
<td style="text-align:center">HEAD</td>
<td style="text-align:center">HEAD方法请求一个与GET请求的响应相同的响应，但没有响应体.</td>
</tr>
<tr>
<td style="text-align:center">TRACE</td>
<td style="text-align:center">TRACE方法沿着到目标资源的路径执行一个消息环回测试。</td>
</tr>
<tr>
<td style="text-align:center">OPTIONS</td>
<td style="text-align:center">OPTIONS方法用于描述目标资源的通信选项。</td>
</tr>
<tr>
<td style="text-align:center">CONNECT</td>
<td style="text-align:center">CONNECT方法建立一个到由目标资源标识的服务器的隧道。</td>
</tr>
</tbody>
</table>
<h2 id="Cookie是什么"><a href="#Cookie是什么" class="headerlink" title="Cookie是什么"></a>Cookie是什么</h2><p>简单来说，cookie就是浏览器存储在用户电脑上的一小段文本文件。<br>1.浏览器访问服务器后，服务器传给浏览器的一段数据。<br>2.浏览器需要保存这段数据，不得轻易删除。<br>3.此后每次浏览器访问该服务器，都必须带上这段数据。</p>
<p>cookie一般有两个作用。<br>第一个作用是识别用户身份。<br>第二个作用是记录历史。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[命令行简单学习]]></title>
      <url>/2017/02/19/%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h1 id="命令行和Node-js简单学习"><a href="#命令行和Node-js简单学习" class="headerlink" title="命令行和Node.js简单学习"></a>命令行和Node.js简单学习</h1><h2 id="bash脚本"><a href="#bash脚本" class="headerlink" title="bash脚本"></a>bash脚本</h2><p>先看一个bash 脚本</p>
<pre class=" language-bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -f <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>
    <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$1</span> not exist"</span>
    <span class="token keyword">exit</span> 1
<span class="token keyword">else</span>
    <span class="token function">cat</span> <span class="token variable">$1</span>
    <span class="token keyword">exit</span> 0
<span class="token keyword">fi</span>
</code></pre>
<p>保存为 <code>my-show.sh</code><br>这个脚本的作用是将要查找的文件打印到屏幕上，加了是否存在的判断。<br>第一个知识点：参数 。<code>$1</code> 这个就是参数。获取脚本后带的第一个参数,<code>/path/to/my-show.sh test</code> 其中<code>test</code> 就是第一个参数。<br>第二个知识点：判断。 <code>if...else</code> 这是bash语法里的判断语句。<br>第三个知识点：异常处理。通过判断语句来判断文件是否存在。<br>第四个知识点：返回值。在上面的脚本中，如果正常我们退出为0 <code>exit 0</code> ，在bash里表示正常。当异常时我们退出为1<code>exit 1</code> </p>
<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><p>应用程序接口（Application Programming Interface），又称应用编程接口，就是软件系统不同组成部分衔接的约定。<br><img src="https://raw.githubusercontent.com/gl09025/blog/master/images/%E7%B3%BB%E7%BB%9FAPI.png" alt=""></p>
<h2 id="什么是Node-js"><a href="#什么是Node-js" class="headerlink" title="什么是Node.js"></a>什么是Node.js</h2><p><strong>学习Node.js建议在Linux或mac环境下，windows会有很多未知的坑。</strong><br>Node.js不是JS应用、而是JS运行平台<br><img src="https://raw.githubusercontent.com/gl09025/blog/master/images/Node.jsAPI.png" alt=""></p>
<p>浏览器也是一个平台<br><img src="https://raw.githubusercontent.com/gl09025/blog/master/images/%E6%B5%8F%E8%A7%88%E5%99%A8API.png" alt=""></p>
<h3 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h3><p>说道Node.js我们就需要了解NPM，NPM其实就是一个共享代码的平台，将代码整合到一个平台上方便开发者使用。 <a href="https://zhuanlan.zhihu.com/p/24357770" target="_blank" rel="noopener">NPM是干什么的</a><br><code>npm install jQuery</code><br>就相当于</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/jquery/jquery/archive/3.1.1.zip
unzip 3.1.1.zip
</code></pre>
<h3 id="简单配置NPM"><a href="#简单配置NPM" class="headerlink" title="简单配置NPM"></a>简单配置NPM</h3><p>1.<code>npm config set loglevel http</code> 显示npm发的每一个请求。</p>
<p>2.<code>npm config set progess false</code> 关闭进度条，据说能够加快下载速度。</p>
<p>3.配置国内源加快下载速度 <code>npm config set registry https://registry.npm.taobao.org</code> 恢复 <code>npm config delete registry</code></p>
<h3 id="Node-js写个简单命令行程序"><a href="#Node-js写个简单命令行程序" class="headerlink" title="Node.js写个简单命令行程序"></a>Node.js写个简单命令行程序</h3><p>刚开始看不懂代码没有关系，我们能够在网上搜索到并解决问题就可以。<br>比如我们要写一个显示当前目录下所有文件的脚本文件。通过搜索“Node.js显示当前目录下文件”我们得到了如下结果</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#!/usr/bin/env node</span>
var fs <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console.log<span class="token punctuation">(</span><span class="token string">"查看当前目录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fs.readdir<span class="token punctuation">(</span>process.cwd<span class="token punctuation">(</span><span class="token punctuation">)</span>,function<span class="token punctuation">(</span>error, files<span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> console.error<span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   files.forEach<span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">{</span>
       console.log<span class="token punctuation">(</span> <span class="token function">file</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>保存为<code>my-show.js</code> 执行<code>node my-show.js</code> 就可以看到效果了。</p>
<h3 id="发布代码到NPM"><a href="#发布代码到NPM" class="headerlink" title="发布代码到NPM"></a>发布代码到NPM</h3><p>如果我们要发布程序到NPM供其他人下载的话，我们就可以在程序所在的目录下<code>NPM init</code> 按照提示来输入，会在当前目录生成含如下内容的<code>package.json</code> </p>
<pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span>
  <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"test"</span>,
  <span class="token string">"version"</span><span class="token keyword">:</span> <span class="token string">"1.0.0"</span>,
  <span class="token string">"description"</span><span class="token keyword">:</span> <span class="token string">"just test，dont download"</span>,
  <span class="token string">"main"</span><span class="token keyword">:</span> <span class="token string">"my-show.js"</span>,
  <span class="token string">"dependencies"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>
    <span class="token string">"jquery"</span><span class="token keyword">:</span> <span class="token string">"^3.1.1"</span>
  <span class="token punctuation">}</span>,
  <span class="token string">"devDependencies"</span><span class="token keyword">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>,
  <span class="token string">"scripts"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>
    <span class="token string">"test"</span><span class="token keyword">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>
  <span class="token punctuation">}</span>,
  <span class="token string">"bin"</span>:<span class="token punctuation">{</span>
    <span class="token string">"my-view"</span><span class="token keyword">:</span><span class="token string">"my-view.js"</span>
  <span class="token punctuation">}</span>,
  <span class="token string">"author"</span><span class="token keyword">:</span> <span class="token string">"test"</span>,
  <span class="token string">"license"</span><span class="token keyword">:</span> <span class="token string">"ISC"</span>
<span class="token punctuation">}</span>
</code></pre>
<p>再执行<code>npm addusr</code> <code>npm publish</code> </p>
<h2 id="如何学习编程"><a href="#如何学习编程" class="headerlink" title="如何学习编程"></a>如何学习编程</h2><p>1.编程其实是个很复杂的东西。<br>2.但是我们可以在不知道实现原理的情况下，通过搜索或者询问其他会的人来学会如何先实现一些效果。<br>3.我们在使用的过程中就会逐渐明白运作的原理。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CLI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[安装shasowsocks]]></title>
      <url>/2017/02/19/shadowsocks/</url>
      <content type="html"><![CDATA[<h3 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python-pip
<span class="token function">sudo</span> pip <span class="token function">install</span> shadowsocks
</code></pre>
<pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vi</span> /etc/shadowsocks.json
</code></pre>
<pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span>
    <span class="token string">"server"</span><span class="token keyword">:</span><span class="token string">"0.0.0.0"</span>,    
    <span class="token string">"server_port"</span>:8080,    // ss端口，自己定义，下面会用到
    <span class="token string">"local_address"</span><span class="token keyword">:</span><span class="token string">"127.0.0.1"</span>,
    <span class="token string">"local_port"</span>:1080,
    <span class="token string">"password"</span><span class="token keyword">:</span><span class="token string">"123"</span>,    //ss密码，下面会用到
    <span class="token string">"timeout"</span>:300,
    <span class="token string">"method"</span><span class="token keyword">:</span><span class="token string">"aes-256-cfb"</span>,
    <span class="token string">"fast_open"</span>:false
<span class="token punctuation">}</span>
</code></pre>
<pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> ssserver -c /etc/shadowsocks.json -d start
</code></pre>
<pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> ssserver -c /etc/shadowsocks.json -d restart

<span class="token function">sudo</span> ssserver -c /etc/shadowsocks.json -d stop
</code></pre>
<h3 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vi</span> /etc/init.d/shadowsocks
</code></pre>
<pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>
<span class="token comment" spellcheck="true">### BEGIN INIT INFO</span>
<span class="token comment" spellcheck="true"># Provides:          shadowsocks</span>
<span class="token comment" spellcheck="true"># Required-Start:    $remote_fs $syslog</span>
<span class="token comment" spellcheck="true"># Required-Stop:     $remote_fs $syslog</span>
<span class="token comment" spellcheck="true"># Default-Start:     2 3 4 5</span>
<span class="token comment" spellcheck="true"># Default-Stop:      0 1 6</span>
<span class="token comment" spellcheck="true"># Short-Description: start shadowsocks </span>
<span class="token comment" spellcheck="true"># Description:       start shadowsocks</span>
<span class="token comment" spellcheck="true">### END INIT INFO</span>

start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    ssserver -c /etc/shadowsocks.json -d start
<span class="token punctuation">}</span>

stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    ssserver -c /etc/shadowsocks.json -d stop
<span class="token punctuation">}</span>

<span class="token keyword">case</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token keyword">in</span>
start<span class="token punctuation">)</span>
    start
    <span class="token punctuation">;</span><span class="token punctuation">;</span>
stop<span class="token punctuation">)</span>
    stop
    <span class="token punctuation">;</span><span class="token punctuation">;</span>
reload<span class="token punctuation">)</span>
     stop
     start
     <span class="token punctuation">;</span><span class="token punctuation">;</span>
*<span class="token punctuation">)</span>
    <span class="token keyword">echo</span> <span class="token string">"Usage: <span class="token variable">$0</span> {start|reload|stop}"</span>
    <span class="token keyword">exit</span> 1
    <span class="token punctuation">;</span><span class="token punctuation">;</span>
esac
</code></pre>
<p>注意：这里命令是以root权限运行，如果不想以root权限运行可以用将命令改为sudo -u {user} {command}<br>增加这个文件的可执行权限</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> +x /etc/init.d/shadowsocks
</code></pre>
<p>在 rc.d 中新增</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> update-rc.d shadowsocks defaults
</code></pre>
<p>好了，搞定，可以在shell中直接运行sudo service shadowsocks {start|reload|stop}来控制了！</p>
]]></content>
      
        <categories>
            
            <category> 科学上网 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[让WSL变得更好看]]></title>
      <url>/2017/02/19/WSL/</url>
      <content type="html"><![CDATA[<h3 id="首先开启windows10上面的bash"><a href="#首先开启windows10上面的bash" class="headerlink" title="首先开启windows10上面的bash"></a>首先开启windows10上面的bash</h3><p><a href="https://msdn.microsoft.com/en-us/commandline/wsl/install_guide" target="_blank" rel="noopener">参考官方教程</a></p>
<h3 id="wsl-terminal"><a href="#wsl-terminal" class="headerlink" title="wsl-terminal"></a>wsl-terminal</h3><p>安装比bash好用的终端软件<br><a href="https://github.com/goreliu/wsl-terminal" target="_blank" rel="noopener">wsl-terminal-github</a></p>
<h3 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh my zsh"></a>oh my zsh</h3><p><a href="http://ohmyz.sh/" target="_blank" rel="noopener">官网</a><br><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">Github</a></p>
<p>我安装了agnoster主题，但安装完了默认的字体还是不支持这个主题，下载字体<br><a href="https://github.com/powerline/fonts/tree/master/DejaVuSansMono" target="_blank" rel="noopener">https://github.com/powerline/fonts/tree/master/DejaVuSansMono</a></p>
<p>我选择了DejaVu Sans Mono for Powerline.ttf字体，双击安装。</p>
<h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><p>让终端颜色更好看<br><a href="https://github.com/seebi/dircolors-solarized" target="_blank" rel="noopener">Github</a></p>
<p>将仓库克隆下来，找个位置放一下。我就直接放在</p>
<pre class=" language-bash"><code class="language-bash">~/Git
</code></pre>
<p>再执行这条语句</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">eval</span> <span class="token variable"><span class="token variable">`</span><span class="token function">dircolors</span> ~/Git/dircolors-solarized/dircolors.256dark<span class="token variable">`</span></span>
</code></pre>
<h4 id="安装nodejs和npm"><a href="#安装nodejs和npm" class="headerlink" title="安装nodejs和npm"></a>安装nodejs和npm</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> autoremove --purge <span class="token function">npm</span> node nodejs
curl -sL https://deb.nodesource.com/setup_7.x <span class="token operator">|</span> <span class="token function">sudo</span> -E <span class="token function">bash</span> -
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> -y nodejs
<span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> -g <span class="token function">npm</span>
</code></pre>
<p>运行 npm config set loglevel http，让你知道 npm 发的每一个请求<br>运行 npm config set progress false，关闭那个进度条<br>为了让你的安装速度变快，运行 npm config set registry <a href="https://registry.npm.taobao.org/想要恢复成原样，只需要" target="_blank" rel="noopener">https://registry.npm.taobao.org/想要恢复成原样，只需要</a> npm config delete registry 即可</p>
<h5 id="npm-i-g-vue-cli-出错"><a href="#npm-i-g-vue-cli-出错" class="headerlink" title="npm i -g vue-cli 出错"></a>npm i -g vue-cli 出错</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g async
$ <span class="token function">npm</span> <span class="token function">install</span> -g abbrev
$ <span class="token function">npm</span> <span class="token function">install</span> -g http-errors
$ <span class="token function">npm</span> <span class="token function">install</span> -g browerify
$ <span class="token function">npm</span> i -g <span class="token function">npm</span>
</code></pre>
<blockquote>
<p>参考文章<br><a href="https://medium.com/@Andreas_cmj/how-to-setup-a-nice-looking-terminal-with-wsl-in-windows-10-creators-update-2b468ed7c326" target="_blank" rel="noopener">https://medium.com/@Andreas_cmj/how-to-setup-a-nice-looking-terminal-with-wsl-in-windows-10-creators-update-2b468ed7c326</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 软件 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WSL </tag>
            
            <tag> windows </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[高效命令行]]></title>
      <url>/2017/02/19/%E9%AB%98%E6%95%88%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
      <content type="html"><![CDATA[<p>学习命令行不要怕，就像学游泳，要先下水，刚开始保证自己不被淹死，到后面你就会越来越熟练了。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ol>
<li>文件</li>
<li>目录</li>
<li>节点</li>
<li>路径<ul>
<li>相对路径</li>
<li>绝对路径</li>
</ul>
</li>
</ol>
<h2 id="图形界面和命令行的简单区别"><a href="#图形界面和命令行的简单区别" class="headerlink" title="图形界面和命令行的简单区别"></a>图形界面和命令行的简单区别</h2><table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">输入</th>
<th style="text-align:center">输出</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">图形界面</td>
<td style="text-align:center">鼠标点击</td>
<td style="text-align:center">弹出对话框</td>
</tr>
<tr>
<td style="text-align:center">命令行</td>
<td style="text-align:center">键入文字</td>
<td style="text-align:center">显示文字</td>
</tr>
</tbody>
</table>
<h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><p>命令 -选项 参数<br>如<code>cp -r a b</code> </p>
<p>最基本的命令：</p>
<pre><code>mkdir：创建目录
rm ：删除
mv：移动，改名
cp:拷贝
ls:列出
ln:链接
pwd:所在路径
~:用户家目录
echo:常用echo &quot;example&quot; &gt; example.txt或者追加echo &quot;example&quot; &gt;&gt; example.txt
</code></pre><h2 id="学习命令行"><a href="#学习命令行" class="headerlink" title="学习命令行"></a>学习命令行</h2><p>自查帮助手册</p>
<ol>
<li>man cd</li>
<li>cd -h</li>
<li>cd –help</li>
<li><a href="http://explainshell.com/" target="_blank" rel="noopener">explainshell</a></li>
</ol>
<h2 id="VIM官方小结"><a href="#VIM官方小结" class="headerlink" title="VIM官方小结"></a>VIM官方小结</h2><p>这里将vimtutor的总结拿出来</p>
<pre><code>                               第一讲小结


  1. 光标在屏幕文本中的移动既可以用箭头键，也可以使用 hjkl 字母键。
         h (左移)       j (下行)       k (上行)     l (右移)

  2. 欲进入 Vim 编辑器(从命令行提示符)，请输入：vim 文件名 &lt;回车&gt;

  3. 欲退出 Vim 编辑器，请输入 &lt;ESC&gt;   :q!   &lt;回车&gt; 放弃所有改动。
                      或者输入 &lt;ESC&gt;   :wq   &lt;回车&gt; 保存改动。

  4. 在正常模式下删除光标所在位置的字符，请按： x

  5. 欲插入或添加文本，请输入：

         i   输入欲插入文本   &lt;ESC&gt;             在光标前插入文本
         A   输入欲添加文本   &lt;ESC&gt;             在一行后添加文本

特别提示：按下 &lt;ESC&gt; 键会带您回到正常模式或者撤消一个不想输入或部分完整
的命令。

好了，第一讲到此结束。下面接下来继续第二讲的内容。
</code></pre><pre><code>                               第二讲小结


  1. 欲从当前光标删除至下一个单词，请输入：dw
  2. 欲从当前光标删除至当前行末尾，请输入：d$
  3. 欲删除整行，请输入：dd

  4. 欲重复一个动作，请在它前面加上一个数字：2w
  5. 在正常模式下修改命令的格式是：
               operator   [number]   motion
     其中：
       operator - 操作符，代表要做的事情，比如 d 代表删除
       [number] - 可以附加的数字，代表动作重复的次数
       motion   - 动作，代表在所操作的文本上的移动，例如 w 代表单词(word)，
                  $ 代表行末等等。

  6. 欲移动光标到行首，请按数字0键：0

  7. 欲撤消以前的操作，请输入：u (小写的u)
     欲撤消在一行中所做的改动，请输入：U (大写的U)
     欲撤消以前的撤消命令，恢复以前的操作结果，请输入：CTRL-R
</code></pre><pre><code>                                  第三讲小结


  1. 要重新置入已经删除的文本内容，请按小写字母 p 键。该操作可以将已删除
     的文本内容置于光标之后。如果最后一次删除的是一个整行，那么该行将置
     于当前光标所在行的下一行。

  2. 要替换光标所在位置的字符，请输入小写的 r 和要替换掉原位置字符的新字
     符即可。

  3. 更改类命令允许您改变从当前光标所在位置直到动作指示的位置中间的文本。
     比如输入 ce 可以替换当前光标到单词的末尾的内容；输入 c$ 可以替换当
     前光标到行末的内容。

  4. 更改类命令的格式是：

         c   [number]   motion

现在我们继续学习下一讲。
</code></pre><pre><code>                               第四讲小结


  1. CTRL-G 用于显示当前光标所在位置和文件状态信息。
     G 用于将光标跳转至文件最后一行。
     先敲入一个行号然后输入大写 G 则是将光标移动至该行号代表的行。
     gg 用于将光标跳转至文件第一行。

  2. 输入 / 然后紧随一个字符串是在当前所编辑的文档中正向查找该字符串。
     输入 ? 然后紧随一个字符串则是在当前所编辑的文档中反向查找该字符串。
     完成一次查找之后按 n 键是重复上一次的命令，可在同一方向上查
     找下一个匹配字符串所在；或者按大写 N 向相反方向查找下一匹配字符串所在。
     CTRL-O 带您跳转回较旧的位置，CTRL-I 则带您到较新的位置。

  3. 如果光标当前位置是括号(、)、[、]、{、}，按 % 会将光标移动到配对的括号上。

  4. 在一行内替换头一个字符串 old 为新的字符串 new，请输入  :s/old/new
     在一行内替换所有的字符串 old 为新的字符串 new，请输入  :s/old/new/g
     在两行内替换所有的字符串 old 为新的字符串 new，请输入  :#,#s/old/new/g
     在文件内替换所有的字符串 old 为新的字符串 new，请输入  :%s/old/new/g
     进行全文替换时询问用户确认每个替换需添加 c 标志        :%s/old/new/gc
</code></pre><pre><code>                               第五讲小结


  1. :!command 用于执行一个外部命令 command。

     请看一些实际例子：
         (MS-DOS)         (Unix)
          :!dir            :!ls            -  用于显示当前目录的内容。
          :!del FILENAME   :!rm FILENAME   -  用于删除名为 FILENAME 的文件。

  2. :w FILENAME  可将当前 VIM 中正在编辑的文件保存到名为 FILENAME 的文
     件中。

  3. v motion :w FILENAME 可将当前编辑文件中可视模式下选中的内容保存到文件
     FILENAME 中。

  4. :r FILENAME 可提取磁盘文件 FILENAME 并将其插入到当前文件的光标位置
     后面。

  5. :r !dir 可以读取 dir 命令的输出并将其放置到当前文件的光标位置后面。
</code></pre><pre><code>                               第六讲小结

  1. 输入小写的 o 可以在光标下方打开新的一行并进入插入模式。
     输入大写的 O 可以在光标上方打开新的一行。

  2. 输入小写的 a 可以在光标所在位置之后插入文本。
     输入大写的 A 可以在光标所在行的行末之后插入文本。

  3. e 命令可以使光标移动到单词末尾。

  4. 操作符 y 复制文本，p 粘贴先前复制的文本。

  5. 输入大写的 R 将进入替换模式，直至按 &lt;ESC&gt; 键回到正常模式。

  6. 输入 :set xxx 可以设置 xxx 选项。一些有用的选项如下：
        &#39;ic&#39; &#39;ignorecase&#39;       查找时忽略字母大小写
        &#39;is&#39; &#39;incsearch&#39;        查找短语时显示部分匹配
        &#39;hls&#39; &#39;hlsearch&#39;        高亮显示所有的匹配短语
     选项名可以用完整版本，也可以用缩略版本。

  7. 在选项前加上 no 可以关闭选项：  :set noic
</code></pre><pre><code>                                  第七讲小结


  1. 输入 :help 或者按 &lt;F1&gt; 键或 &lt;Help&gt; 键可以打开帮助窗口。

  2. 输入 :help cmd 可以找到关于 cmd 命令的帮助。

  3. 输入 CTRL-W CTRL-W  可以使您在窗口之间跳转。

  4. 输入 :q 以关闭帮助窗口

  5. 您可以创建一个 vimrc 启动脚本文件用来保存您偏好的设置。

  6. 当输入 : 命令时，按 CTRL-D 可以查看可能的补全结果。
     按 &lt;TAB&gt; 可以使用一个补全。
</code></pre><h2 id="环境变量设置"><a href="#环境变量设置" class="headerlink" title="环境变量设置"></a>环境变量设置</h2><p>典型的<code>~/.bashrc</code><br>常用的是我们可以在里面使用 <code>alias</code> 重命名命令，比如我们要查找根目录的普通文件</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">find</span> / -type f -name <span class="token string">"example.txt"</span>
</code></pre>
<p>可以在bashrc中这么写</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">alias</span> fd <span class="token operator">=</span> <span class="token variable"><span class="token variable">`</span><span class="token function">find</span> / -type f -name $1<span class="token variable">`</span></span>
</code></pre>
<p>重启终端或者在终端中<code>source ~/.bashrc</code> 生效。<br>我们执行<code>fd example.txt</code> 就相当于上面的一长串了。<br>也可以在里面写一个简单的函数</p>
<pre class=" language-bash"><code class="language-bash">fd <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  local d
  d <span class="token operator">=</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">find</span> <span class="token keyword">.</span> -type d -name $1<span class="token variable">)</span></span>
  <span class="token function">cd</span> <span class="token string">"<span class="token variable">$d</span>"</span>
<span class="token punctuation">}</span>
</code></pre>
<p>上面这个函数的作用就是找到目录并进入，这个写的比较简单，这里只是举个栗子。</p>
<h2 id="z"><a href="#z" class="headerlink" title="z"></a>z</h2><p><a href="https://github.com/rupa/z" target="_blank" rel="noopener">点我查看官方github</a><br>官方简介</p>
<pre><code>DESCRIPTION
       Tracks your most used directories, based on &#39;frecency&#39;.

       After  a  short  learning  phase, z will take you to the most &#39;frecent&#39;
       directory that matches ALL of the regexes given on the command line, in
       order.

       For example, z foo bar would match /foo/bar but not /bar/foo.
</code></pre><p>简单的理解就是能够进入最常用的目录，不需要再去寻找。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CLI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML-Form知识点小结]]></title>
      <url>/2017/02/12/HTML-Form%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="1-form表单有什么作用？有哪些常用的input标签，分别有什么作用"><a href="#1-form表单有什么作用？有哪些常用的input标签，分别有什么作用" class="headerlink" title="1.form表单有什么作用？有哪些常用的input标签，分别有什么作用"></a>1.form表单有什么作用？有哪些常用的input标签，分别有什么作用</h2><p>主要用于将页面上用户填写的信息提交给网站后台服务器，达到向服务器传输数据的目的。常用的input标签:<code>text</code> 、<code>password</code> 、<code>radio</code> 、<code>checkbox</code> 、<code>file</code> 、<code>textarea</code> 、<code>image</code>、<code>button</code>、<code>submit</code>、<code>reset</code>  </p>
<table>
<thead>
<tr>
<th style="text-align:left">值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">text</td>
<td style="text-align:left">定义单行的输入字段，用户可在其中输入文本。默认宽度为20个字符。</td>
</tr>
<tr>
<td style="text-align:left">password</td>
<td style="text-align:left">定义密码字段。该字段中的字符被掩码。</td>
</tr>
<tr>
<td style="text-align:left">radio</td>
<td style="text-align:left">定义单选按钮。</td>
</tr>
<tr>
<td style="text-align:left">checkbox</td>
<td style="text-align:left">定义复选框。</td>
</tr>
<tr>
<td style="text-align:left">file</td>
<td style="text-align:left">定义输入字段和“浏览”按钮，供文件上传。</td>
</tr>
<tr>
<td style="text-align:left">image</td>
<td style="text-align:left">定义图像形式的提交按钮。</td>
</tr>
<tr>
<td style="text-align:left">button</td>
<td style="text-align:left">定义可点击按钮（多数情况下，用于通过JavaScript启动脚本）。</td>
</tr>
<tr>
<td style="text-align:left">submit</td>
<td style="text-align:left">定义提交按钮。提交按钮会把表单数据发送到服务器。</td>
</tr>
<tr>
<td style="text-align:left">reset</td>
<td style="text-align:left">定义重置按钮。重置按钮会清除表单中的所有数据。</td>
</tr>
</tbody>
</table>
<h2 id="2-post和get方式的区别？"><a href="#2-post和get方式的区别？" class="headerlink" title="2.post和get方式的区别？"></a>2.post和get方式的区别？</h2><ul>
<li>传送方式。<br>  get请求是会将表单数据以明文附在URL之后，在实际开发中特定的浏览器和服务器对于URL的长度是有限制的。post提交的数据放在HTTP消息主体中，不会改变URL的长度。</li>
<li>安全<br>  post的安全性要比get高。get在发送数据是会将数据拼接到url上是明文的。</li>
<li>URL长度数据量。<br>  get会将数据放置在url上，所以url更长。而post不会改变当前的url。</li>
</ul>
<p>一般我们在进行不重要的数据传输是可以使用get，比如搜索引擎。在设计敏感信息时我们应该使用POST。</p>
<h2 id="3-在input里，name有什么作用？"><a href="#3-在input里，name有什么作用？" class="headerlink" title="3.在input里，name有什么作用？"></a>3.在input里，name有什么作用？</h2><p>主要是对提交到服务区后的表单数据进行标识，只有设置了name属性的表单元素才能在提交表单时传递他们的值。</p>
<h2 id="4-radio如何分组？"><a href="#4-radio如何分组？" class="headerlink" title="4.radio如何分组？"></a>4.radio如何分组？</h2><p>设置<code>name</code>属性中的值为一样。例如：</p>
<pre class=" language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>男
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>女
</code></pre>
<h2 id="5-placeholder属性有什么作用？"><a href="#5-placeholder属性有什么作用？" class="headerlink" title="5.placeholder属性有什么作用？"></a>5.placeholder属性有什么作用？</h2><p>在可描述的<code>input</code>标签中提供一个预览信息以供提示。该提示会在输入字段为空时显示，在获得焦点后消失。适用于以下<code>input</code>类型:text、search、url、telephone、email以及password。</p>
<h2 id="6-type-hidden隐藏域有什么作用？举例说明"><a href="#6-type-hidden隐藏域有什么作用？举例说明" class="headerlink" title="6.type=hidden隐藏域有什么作用？举例说明"></a>6.type=hidden隐藏域有什么作用？举例说明</h2><p>基本语法：</p>
<pre class=" language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>country<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>China<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
</code></pre>
<p>定义为hidden是用户不可见的，会存储一个默认值，用于暂存数据和提高安全。<br>1.有时候我们要给用户一些信息，让他在提交表单时提交上来以确定用户身份。<br>2.一个网页中有多个form时，可以分别在form中写隐藏域来更好的区分。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML知识点]]></title>
      <url>/2017/02/11/HTML%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      <content type="html"><![CDATA[<h2 id="HTML、XML、XHTML有什么区别"><a href="#HTML、XML、XHTML有什么区别" class="headerlink" title="HTML、XML、XHTML有什么区别"></a>HTML、XML、XHTML有什么区别</h2><p>HTML:全称为超文本标记语言(Hyper Text Markup Language)，是一种使用标记标签来描述网页的标记语言，不属于编程语言。<br>XML:全称为可扩展标记语言(Extensible Markup Language)被设计用来传输和存储数据的可扩展标记语言。不是HTML的替代，XML的侧重点在于数据的内容，而HTML的侧重点在数据的外观。<br>XHTML:全称为可扩展超文本标签语言(Extensible Hyper Text Markup Language)，基于XML并且比HTML更严格更纯净，是用来替代HTML的。</p>
<h2 id="怎样理解HTML语义化"><a href="#怎样理解HTML语义化" class="headerlink" title="怎样理解HTML语义化"></a>怎样理解HTML语义化</h2><p>语义化就是要用正确的标签来做正确的事，使页面的内容结构化，语义化既可以容易阅读和维护，又便于对浏览器、搜索引擎解析。</p>
<h2 id="内容与样式分离的原则"><a href="#内容与样式分离的原则" class="headerlink" title="内容与样式分离的原则"></a>内容与样式分离的原则</h2><h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3><ul>
<li>写 HTML 的时候先不管样式, 重点放在HTML的结构和语义化上，让 HTML 能体现页面结构或者内容。之后再去写样式。</li>
<li>HTML 内不允许出现属性样式，尽量不要出现行内样式。<h3 id="使用这个原则的原因"><a href="#使用这个原则的原因" class="headerlink" title="使用这个原则的原因"></a>使用这个原则的原因</h3></li>
<li>提高机器可读性，让浏览器能够更好的去解析页面结构。</li>
<li>当需要修改网页内容时，省时，效率。样式和内容分离查找起来更容易。</li>
<li>样式可以根据不同的浏览器来做兼容。保证网页显示效果的统一。</li>
</ul>
<h2 id="有哪些常见的meta标签"><a href="#有哪些常见的meta标签" class="headerlink" title="有哪些常见的meta标签"></a>有哪些常见的meta标签</h2><p>meta常用于定义页面的说明，关键字，最后修改日期和其他元数据。这些元数据将服务于浏览器(如何布局或重载页面)，搜索引擎和其他网络服务。<br>常见的标签：</p>
<pre class=" language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>网页关键字<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>网页的主要内容<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>作者名字，作者邮箱<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width,initial-scale<span class="token punctuation">=</span>1,maximum-scale<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge,chrome<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>urf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
</code></pre>
<p><a href="https://segmentfault.com/a/1190000004279791" target="_blank" rel="noopener">这里有更详细的解释</a></p>
<h2 id="文档声明的作用？严格模式和混杂模式指什么？-lt-doctype-html-gt-的作用？"><a href="#文档声明的作用？严格模式和混杂模式指什么？-lt-doctype-html-gt-的作用？" class="headerlink" title="文档声明的作用？严格模式和混杂模式指什么？&lt;!doctype html&gt;的作用？"></a>文档声明的作用？严格模式和混杂模式指什么？&lt;!doctype html&gt;的作用？</h2><p>&lt;!doctype html&gt;代表 文档对象模型，作用是告诉浏览器使用html5的方式来解析渲染当前的页面。<br>没有这个文档声明的话，浏览器会根据的自己的方式去解析渲染当前的页面，有可能会造成样式和内容渲染的效果不一样，这时候就是混杂模式了。有了文档声明就是严格模式，浏览器会按照所声明的格式来解析和渲染。</p>
<h2 id="浏览器乱码的原因是什么？如何解决"><a href="#浏览器乱码的原因是什么？如何解决" class="headerlink" title="浏览器乱码的原因是什么？如何解决"></a>浏览器乱码的原因是什么？如何解决</h2><p>乱码主要是因为编写页面文件后，在保存的时候编码和浏览里识别的编码不一样。<br>解决方法：在页面中声明为保存的编码，比如保存的编码为<code>utf-8</code>，在页面中也声明为这个编码。</p>
<pre class=" language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="常见的浏览器有哪些？什么内核？"><a href="#常见的浏览器有哪些？什么内核？" class="headerlink" title="常见的浏览器有哪些？什么内核？"></a>常见的浏览器有哪些？什么内核？</h2><p>Chrome、Opera、safari都为webkit内核。<br>Firefox为Gecko内核。<br><a href="http://web.jobbole.com/84826/" target="_blank" rel="noopener">更详细的内核介绍</a></p>
<h2 id="列出常见的标签，并简单介绍这些标签用在什么场景"><a href="#列出常见的标签，并简单介绍这些标签用在什么场景" class="headerlink" title="列出常见的标签，并简单介绍这些标签用在什么场景"></a>列出常见的标签，并简单介绍这些标签用在什么场景</h2><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><p>定义文档的头部，它是所有头部元素的容器。里面可以引用脚本、指示浏览器在哪里找到样式表、提供元信息等等。</p>
<pre class=" language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="body"><a href="#body" class="headerlink" title="body"></a>body</h3><p>定义文档的主题，包含文档的所有内容(比如文本、超链接、图像、表格和列表等等)。</p>
<pre class=" language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="标题h1-h6"><a href="#标题h1-h6" class="headerlink" title="标题h1~h6"></a>标题h1~h6</h3><p>定义标题从大到小依次为h1,h2,h3,h4,h5,h6。</p>
<pre class=" language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>标题1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>标题2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
......
</code></pre>
<h3 id="文本强调"><a href="#文本强调" class="headerlink" title="文本强调"></a>文本强调</h3><p>主要用于强调特定的内容。</p>
<h4 id="strong"><a href="#strong" class="headerlink" title="strong"></a>strong</h4><p>表示强调标签文本内容，不改变其含义。</p>
<pre class=" language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>
</code></pre>
<h4 id="em"><a href="#em" class="headerlink" title="em"></a>em</h4><p>表示感情上的强调，增强了语气。</p>
<pre class=" language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>Text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>Text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="段落和块"><a href="#段落和块" class="headerlink" title="段落和块"></a>段落和块</h3><p><code>p</code>和<code>div</code>p是语义化的段落标签，用于文章分段；div是普通的块标签，多用于布局。</p>
<pre class=" language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>用于嵌入图像。</p>
<pre class=" language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图像url<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图像的替代文本<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>用于链接到另一个页面。</p>
<pre class=" language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><p>定义一个按钮。</p>
<pre class=" language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>定义一个有序列表。</p>
<pre class=" language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>定义无序列表。</p>
<pre class=" language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Coffee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Tea<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Milk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>定义一个简单的HTML表格。</p>
<pre class=" language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Month<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>Savings<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>January<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>参考链接<br><a href="https://leohxj.gitbooks.io/front-end-database/html-and-css-basic/semantic-html.html" target="_blank" rel="noopener">HTML语义化</a><br><a href="http://w3school.com.cn/xml/xml_intro.asp" target="_blank" rel="noopener">XML简介</a><br><a href="http://w3school.com.cn/html/html_intro.asp" target="_blank" rel="noopener">HTML简介</a><br><a href="http://w3school.com.cn/xhtml/xhtml_intro.asp" target="_blank" rel="noopener">XHTML简介</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MarkDown介绍]]></title>
      <url>/2017/02/09/MarkDown%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Markdown已经成为Github圈内所共同使用并认可的编写文档语言</p>
</blockquote>
<p>#什么是Markdown<br>Markdown是一种用来写作的轻量级的<strong>标记语言</strong>。何为标记语言，简单点理解就是一种以纯文字符号来表示成文本的相关信息，比如我们熟知的HTML。</p>
<p>#为什么要用Markdown</p>
<h2 id="跨平台"><a href="#跨平台" class="headerlink" title="跨平台"></a>跨平台</h2><p>标记语言是纯文本的，所以理论上只需一个系统自带的文本编辑器就可以来书写。如果要获得更舒适的体验还是需要安装相应平台对应的Markdown编辑器或者能够解析markdown语法的网页。</p>
<h2 id="共同协作"><a href="#共同协作" class="headerlink" title="共同协作"></a>共同协作</h2><p>因为有了全平台（Windows、Linux、OS X）通用的特性，所以换了环境也可以无缝的编写，无需额外的学习成本。通过GitHub平台可以很方便的进行多人协作。</p>
<h2 id="排版便利"><a href="#排版便利" class="headerlink" title="排版便利"></a>排版便利</h2><p>只需要用少量的文本符号就能够展现页面，具体见文章后半部分的常用语法。</p>
<h2 id="拥护者众多"><a href="#拥护者众多" class="headerlink" title="拥护者众多"></a>拥护者众多</h2><p>诞生于互联网时期的Markdown，受到GitHub圈极客们的热捧。能够改变世界的程序员们发明了Markdown来解决繁杂又耗时间的文档排版问题，毕竟时间就是金钱。</p>
<h1 id="怎么使用Markdown"><a href="#怎么使用Markdown" class="headerlink" title="怎么使用Markdown"></a>怎么使用Markdown</h1><h2 id="流行的编辑器"><a href="#流行的编辑器" class="headerlink" title="流行的编辑器"></a>流行的编辑器</h2><ul>
<li>web全平台<br><a href="https://www.zybuluo.com/" target="_blank" rel="noopener">作业部落</a></li>
<li>windows平台<br><a href="http://www.markdownpad.com/" target="_blank" rel="noopener">MarkdownPad</a></li>
<li>OS X平台<br><a href="http://25.io/mou/" target="_blank" rel="noopener">Mou</a></li>
<li>Linux平台<br><a href="http://sourceforge.net/p/retext/home/ReText/" target="_blank" rel="noopener">ReText</a></li>
</ul>
<h2 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h2><p><em><strong>需要注意的是符号都是英文状态下的符号</strong></em> <br><br>这里只列出经常用到的一些语法。</p>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>最多支持6级标题<br><img src="http://upload-images.jianshu.io/upload_images/4122870-0d915662d0a3eb8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>在前面加<code>-</code>或者数字<code>1</code></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4122870-b3b09688ef7ce395.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Markdown有序列表.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4122870-bd9774094f956ddd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Markdown无序列表.png"></p>
<h3 id="链接和图片"><a href="#链接和图片" class="headerlink" title="链接和图片"></a>链接和图片</h3><p>两者的区别在于图片前多一个<code>!</code>符号</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4122870-3107d593132b6be7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Markdown链接.png"></p>
<p>图片一般都为静态图片,可以上传到GitHub后获取图片的链接或使用其他图床。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4122870-a447b285e5331210.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>引用在前面添加<code>&gt;</code>符号</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4122870-66fab7e7e064bea2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="字体强调"><a href="#字体强调" class="headerlink" title="字体强调"></a>字体强调</h3><p>在字体的前后添加<code>**</code>或<code>_</code>来使字体变成粗体或斜体</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4122870-d997dba4b85d5453.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p><img src="http://upload-images.jianshu.io/upload_images/4122870-e54f7707750d2ea7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Markdown代码块.png"></p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>代码</p>
<pre><code>| 我是标题 | 我是标题 | 我是标题 |
| ------| ------ | ------ |
| 短文本 | 中等文本 | 稍微长一点的文本 |
| 稍微长一点的文本 | 短文本 | 中等文本 |
</code></pre><table>
<thead>
<tr>
<th>一个普通标题</th>
<th>一个普通标题</th>
<th>一个普通标题</th>
</tr>
</thead>
<tbody>
<tr>
<td>短文本</td>
<td>中等文本</td>
<td>稍微长一点的文本</td>
</tr>
<tr>
<td>稍微长一点的文本</td>
<td>短文本</td>
<td>中等文本</td>
</tr>
</tbody>
</table>
<p>相关代码</p>
<pre><code>| 左对齐标题 | 右对齐标题 | 居中对齐标题 |
| :------| ------: | :------: |
| 短文本 | 中等文本 | 稍微长一点的文本 |
| 稍微长一点的文本 | 短文本 | 中等文本 |
</code></pre><table>
<thead>
<tr>
<th style="text-align:left">左对齐标题</th>
<th style="text-align:right">右对齐标题</th>
<th style="text-align:center">居中对齐标题</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">短文本</td>
<td style="text-align:right">中等文本</td>
<td style="text-align:center">稍微长一点的文本</td>
</tr>
<tr>
<td style="text-align:left">稍微长一点的文本</td>
<td style="text-align:right">短文本</td>
<td style="text-align:center">中等文本</td>
</tr>
</tbody>
</table>
<p>简单语法介绍到这里，更详细的语法或高级语法可以参考一下链接</p>
<blockquote>
<p><a href="http://wowubuntu.com/markdown/" target="_blank" rel="noopener">Markdown语法说明（简体中文版）</a><br><a href="http://blog.leanote.com/post/freewalk/Markdown-%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C" target="_blank" rel="noopener">Markdown 语法手册 （完整整理版）</a><br><a href="https://www.zybuluo.com/mdeditor?url=http://www.zybuluo.com/static/editor/md-help.markdown" target="_blank" rel="noopener">Cmd Markdown 编辑阅读器- 作业部落出品</a></p>
</blockquote>
<p>本文参考链接<br><a href="https://daringfireball.net/projects/markdown/syntax" target="_blank" rel="noopener">Markdown: Syntax</a><br><br><a href="http://www.williamlong.info/archives/4319.html" target="_blank" rel="noopener">好用的Markdown编辑器一览</a><br><br><a href="http://www.jianshu.com/p/1e402922ee32#" target="_blank" rel="noopener">Markdown——入门指南</a><br><br><a href="http://www.jianshu.com/p/PpDNMG" target="_blank" rel="noopener">Markdown写作浅谈</a><br></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Travis CI持续部署Hexo博客]]></title>
      <url>/2017/02/08/%E4%BD%BF%E7%94%A8Travis%20CI%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>将Hexo源码和发布代码放到一个仓库的不同分支，便于一一对应，也是对博客源码的备份。这里我使用Github Pages来展示自己的博客，并指定自定义域名。<br>使用Travis的配置，当仓库push后自动部署，不用手动发布。</p>
<h2 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h2><h3 id="一个仓库两个分支"><a href="#一个仓库两个分支" class="headerlink" title="一个仓库两个分支"></a>一个仓库两个分支</h3><p> 1.新建仓库，为了方便我们可以将仓库名命名为 username.github.io，其中username是你的github的id，可以在右上角查看，图中红圈处。如果是使用自定义域名的话，其实仓库名称可以随便取名，为了方便我们不要随便取名。创建仓库的时候我们初始一个readme文件，这样方便我们新建分支操作。<br> <img src="https://raw.githubusercontent.com/gl09025/image_respository/master/2017%E5%B9%B47%E6%9C%8826%E6%97%A5/%E4%BD%BF%E7%94%A8Travis%20CI%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/github_id.png" alt="github_id"><br> 2.创建一个新分支，这里不再赘述怎么创建新分支。例如我创建的新分支：blog-source<br> 3.现在我们有两个分支，一个默认的master分支，一个blog-source分支。blog-source分支用来存放我们的源码，master是部署后的文件。将blog-source设置为默认分支。在仓库的 settings-&gt;Branches-&gt;Default branch中设置。<br> 4.将仓库clone到本地<br> 5.在本地安装Hexo，具体安装步骤和配置在下文。<br> 6.Hexo配置好了之后，第一次我们先手动部署，<code>hexo d</code> 。（如果你集成了Travis就不需要手动部署了，只需要<code>git push</code> 就行了。）</p>
<p>这样我们就有两个分支了一个源码分支和一个部署分支。换了电脑我们只要将仓库克隆下来就可以操作了，配置文件也不会丢失。日常操作流程：<code>git add .</code>  <code>git commit -v</code> <code>git push</code>  <code>hexo g -d</code></p>
<h3 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h3><p>仓库的settings中开启Github Pages</p>
<p><img src="https://raw.githubusercontent.com/gl09025/image_respository/master/2017%E5%B9%B47%E6%9C%8826%E6%97%A5/%E4%BD%BF%E7%94%A8Travis%20CI%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/githubpages_open.png" alt="githubpages_open"></p>
<p>开启之后如果你的仓库名就是 username.github.io的话，就可以直接访问这个地址预览你的博客了。</p>
<h3 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h3><p>首先你要有自己的域名，域名怎么注册呢？有很多选择，有<a href="https://sg.godaddy.com/zh/" target="_blank" rel="noopener">GoDaddy</a>，<a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">阿里云</a> ，<a href="http://www.sudu.cn/" target="_blank" rel="noopener">华夏名网</a>等等。<br>如果使用的是国外的域名注册商的话可以使用DNSPod的免费服务来接管域名注册商的DNS解析。这样国内会快一点。</p>
<p>在仓库中填上自定义域名<br><img src="https://raw.githubusercontent.com/gl09025/image_respository/master/2017%E5%B9%B47%E6%9C%8826%E6%97%A5/%E4%BD%BF%E7%94%A8Travis%20CI%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/githubpages_cunstomdomain.png" alt="githubpages_cunstomdomain"></p>
<p>在域名解析网站后台添加CNAME解析<br><img src="https://raw.githubusercontent.com/gl09025/image_respository/master/2017%E5%B9%B47%E6%9C%8826%E6%97%A5/%E4%BD%BF%E7%94%A8Travis%20CI%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/dns_cname.png" alt="dns_cname"></p>
<p><strong>重要的一步</strong>，我们要在你的Hexo仓库的source文件夹下添加名为<code>CNAME</code> 的文件，注意全部大写，里面内容就写你的自定义域名。如果没有这个文件，每次推送自定义域名都会回到初始的username.github.io</p>
<h3 id="Hexo安装和配置"><a href="#Hexo安装和配置" class="headerlink" title="Hexo安装和配置"></a>Hexo安装和配置</h3><p>参照官方文档来初始化一个Hexo项目</p>
<pre class=" language-bash"><code class="language-bash">$ hexo init <span class="token operator">&lt;</span>folder<span class="token operator">></span>
$ <span class="token function">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">></span>
$ <span class="token function">npm</span> <span class="token function">install</span>
</code></pre>
<p>后面的配置参照官方文档的说明来定制自己的配置。<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">官方文档</a></p>
<p>一般我们都是找到自己喜欢的<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题</a>，然后配置主题。<br>常用的hexo命令</p>
<pre><code>hexo g//生成静态文件
hexo s//开启本地server预览
hexo d//部署
</code></pre><h3 id="Travis"><a href="#Travis" class="headerlink" title="Travis"></a>Travis</h3><p>其实配置很简单，我们在官网使用github账号授权登录，hexo添加配置文件就可以了。<br>1.登录<a href="https://www.travis-ci.org/" target="_blank" rel="noopener">官网</a>，使用github账号登录。<br>2.添加仓库，这里我使用过所以会有，一些选项<br><img src="https://raw.githubusercontent.com/gl09025/image_respository/master/2017%E5%B9%B47%E6%9C%8826%E6%97%A5/%E4%BD%BF%E7%94%A8Travis%20CI%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/travis_addrespositories.png" alt="travis_addrespositories"></p>
<p>3.选中博客仓库<br><img src="https://raw.githubusercontent.com/gl09025/image_respository/master/2017%E5%B9%B47%E6%9C%8826%E6%97%A5/%E4%BD%BF%E7%94%A8Travis%20CI%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/travis_choose.png" alt="travis_choose"><br>4.设置选项<br><img src="https://raw.githubusercontent.com/gl09025/image_respository/master/2017%E5%B9%B47%E6%9C%8826%E6%97%A5/%E4%BD%BF%E7%94%A8Travis%20CI%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/travis_settings.png" alt="travis_settings"><br>5.在github添加Access Token，在右上角账号的settings-&gt;Personal access tokens.点击generate new token来生成新token<br>选择仓库权限就可以。<br><img src="https://raw.githubusercontent.com/gl09025/image_respository/master/2017%E5%B9%B47%E6%9C%8826%E6%97%A5/%E4%BD%BF%E7%94%A8Travis%20CI%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/github_accesstoken.png" alt="github_accesstoken"><br>生成之后一定要保存好，因为只会出现一次，丢失了就只能再重新生成了。</p>
<p>6.回到Travis官网，在设置中填入刚复制的token，取一个名字，这个名字需要写到下面的配置文件中。<br><img src="https://raw.githubusercontent.com/gl09025/image_respository/master/2017%E5%B9%B47%E6%9C%8826%E6%97%A5/%E4%BD%BF%E7%94%A8Travis%20CI%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/travis_addenvironment.png" alt="travis_addenvironment"></p>
<p>7.在你的hexo博客源码中添加配置文件<code>.travis.yml</code><br>你需要修改的是git的配置信息。<br><strong>要使用https协议的仓库地址，使用ssh仓库地址会失败。</strong><br>注意这一行<code>git push --force --quiet &quot;https://${githubblog}@${GH_REF}&quot;</code> 中的githubblog就是你刚在token那里取的名字，要对应上</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">language</span><span class="token punctuation">:</span> node_js
<span class="token key atrule">node_js</span><span class="token punctuation">:</span> stable

<span class="token comment" spellcheck="true"># S: Build Lifecycle</span>
<span class="token key atrule">install</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> npm install


<span class="token comment" spellcheck="true">#before_script:</span>
 <span class="token comment" spellcheck="true"># - npm install -g gulp</span>

<span class="token key atrule">script</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> hexo g

<span class="token key atrule">after_script</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> cd ./public
  <span class="token punctuation">-</span> git init
  <span class="token punctuation">-</span> git config user.name "username"
  <span class="token punctuation">-</span> git config user.email "username@gmail.com"
  <span class="token punctuation">-</span> git add .
  <span class="token punctuation">-</span> git commit <span class="token punctuation">-</span>m "Update docs"
  <span class="token punctuation">-</span> git push <span class="token punctuation">-</span><span class="token punctuation">-</span>force <span class="token punctuation">-</span><span class="token punctuation">-</span>quiet "https<span class="token punctuation">:</span>//$<span class="token punctuation">{</span>githubblog<span class="token punctuation">}</span>@$<span class="token punctuation">{</span>GH_REF<span class="token punctuation">}</span>" master<span class="token punctuation">:</span>master
<span class="token comment" spellcheck="true"># E: Build LifeCycle</span>

<span class="token key atrule">branches</span><span class="token punctuation">:</span>
  <span class="token key atrule">only</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> blog<span class="token punctuation">-</span>resource
<span class="token key atrule">env</span><span class="token punctuation">:</span>
 <span class="token key atrule">global</span><span class="token punctuation">:</span>
   <span class="token punctuation">-</span> <span class="token key atrule">GH_REF</span><span class="token punctuation">:</span> github.com/gl09025/hexo<span class="token punctuation">-</span>blog.git
</code></pre>
<p>配置完成后推送到仓库中，我们就能看到网站中在部署了。</p>
<p><img src="https://raw.githubusercontent.com/gl09025/image_respository/master/2017%E5%B9%B47%E6%9C%8826%E6%97%A5/%E4%BD%BF%E7%94%A8Travis%20CI%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/travis_build.png" alt="travis_build"></p>
<h3 id="使用SSH来部署"><a href="#使用SSH来部署" class="headerlink" title="使用SSH来部署"></a>使用SSH来部署</h3><p>  由于access token的权限太大了，我们可以使用仓库的deploy key来部署<br>  主要参考：<br>  <a href="https://zespia.tw/blog/2015/01/21/continuous-deployment-to-github-with-travis/" target="_blank" rel="noopener">Hexo作者的文章</a><br>  <a href="https://ssarcandy.tw/2016/07/29/hexo-auto-deploy/" target="_blank" rel="noopener">用 Travis CI 自動部屬 hexo 到 GitHub</a><br>  <a href="https://www.karlzhou.com/2016/05/28/travis-ci-deploy-blog/" target="_blank" rel="noopener">用Travis CI自动部署Hexo博客</a></p>
<h3 id="为网站添加免费的HTTPS"><a href="#为网站添加免费的HTTPS" class="headerlink" title="为网站添加免费的HTTPS"></a>为网站添加免费的HTTPS</h3><p>使用<a href="https://app.netlify.com/" target="_blank" rel="noopener">netlify</a>来为自己的网站添加https<br>步骤如下：<br>使用github登录<br>1.创建新网站<br><img src="https://raw.githubusercontent.com/gl09025/image_respository/master/2017%E5%B9%B49%E6%9C%885%E6%97%A5/%E4%BD%BF%E7%94%A8Travis%20CI%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/newsitefromGit.png" alt="new site from Git"><br>2.选择从github创建<br><img src="https://raw.githubusercontent.com/gl09025/image_respository/master/2017%E5%B9%B49%E6%9C%885%E6%97%A5/%E4%BD%BF%E7%94%A8Travis%20CI%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/createANewSite.png" alt=""><br>3.选择仓库<br><img src="https://raw.githubusercontent.com/gl09025/image_respository/master/2017%E5%B9%B49%E6%9C%885%E6%97%A5/%E4%BD%BF%E7%94%A8Travis%20CI%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/select-repository.png" alt=""></p>
<p>4.参数可以都填空，如果是已经使用了Travis CI来部署的话<br><img src="https://raw.githubusercontent.com/gl09025/image_respository/master/2017%E5%B9%B49%E6%9C%885%E6%97%A5/%E4%BD%BF%E7%94%A8Travis%20CI%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/configure-site.png" alt=""></p>
<p>5.填写自定义域名<br><img src="https://raw.githubusercontent.com/gl09025/image_respository/master/2017%E5%B9%B49%E6%9C%885%E6%97%A5/%E4%BD%BF%E7%94%A8Travis%20CI%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/domain-settings.png" alt=""><br>这里我的域名已经改变，你看到的域名应该是自动分配的一个域名。在域名设置里面我这里使用的是自他的域名解析服务，只需要在域名解析后台添加CNAME解析就可以了。</p>
<p>6.在域名解析后台添加CNAME解析<br><img src="https://raw.githubusercontent.com/gl09025/image_respository/master/2017%E5%B9%B49%E6%9C%885%E6%97%A5/%E4%BD%BF%E7%94%A8Travis%20CI%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/cname.png" alt=""></p>
<p>7.强制开启HTTPS<br><img src="https://raw.githubusercontent.com/gl09025/image_respository/master/2017%E5%B9%B49%E6%9C%885%E6%97%A5/%E4%BD%BF%E7%94%A8Travis%20CI%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/HTTPS.png" alt=""><br>在netlify后台的项目的设置中Domain management下可以看到HTTPS的选项有个Force TLS connections选中之后等一会就是强制HTTPS访问了</p>
<div style="display: none"><br><p>影藏的参考链接</p><br><a href="http://blog.csdn.net/woblog/article/details/51319364" target="_blank" rel="noopener">http://blog.csdn.net/woblog/article/details/51319364</a><br><a href="http://www.jianshu.com/p/7cd484bd6dc1" target="_blank" rel="noopener">http://www.jianshu.com/p/7cd484bd6dc1</a><br><a href="https://levirve.github.io/2016/hexo-deploy-through-travisci/" target="_blank" rel="noopener">https://levirve.github.io/2016/hexo-deploy-through-travisci/</a><br><a href="https://www.zhihu.com/question/21193762" target="_blank" rel="noopener">https://www.zhihu.com/question/21193762</a><br></div> ]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Travis ci </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[标签云]]></title>
      <url>/tags.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[「时间轴」]]></title>
      <url>/timeline.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
